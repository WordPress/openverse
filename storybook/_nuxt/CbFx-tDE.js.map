{"version":3,"file":"CbFx-tDE.js","sources":["../../src/composables/use-i18n-utilities.ts"],"sourcesContent":["import { useNuxtApp } from \"#imports\"\nimport type { ComputedRef } from \"vue\"\n\nimport { ALL_MEDIA, AUDIO, IMAGE } from \"#shared/constants/media\"\nimport type {\n  SupportedMediaType,\n  SupportedSearchType,\n} from \"#shared/constants/media\"\nimport type { Collection } from \"#shared/types/search\"\nimport { useGetLocaleFormattedNumber } from \"~/composables/use-get-locale-formatted-number\"\n\ntype KeyCollection = {\n  zero: string\n  count: string\n  countMore: string\n}\ntype KeyMapping = Record<SupportedMediaType, KeyCollection> & {\n  all?: KeyCollection\n}\n/**\n * Not using dynamically-generated keys to ensure that\n * correct line is shown in the 'po' locale files\n */\nconst searchResultKeys = {\n  [ALL_MEDIA]: {\n    zero: \"browsePage.allNoResults\",\n    count: \"browsePage.allResultCount\",\n    countMore: \"browsePage.allResultCountMore\",\n  },\n  [IMAGE]: {\n    zero: \"browsePage.contentLink.image.zero\",\n    count: \"browsePage.contentLink.image.count\",\n    countMore: \"browsePage.contentLink.image.countMore\",\n  },\n  [AUDIO]: {\n    zero: \"browsePage.contentLink.audio.zero\",\n    count: \"browsePage.contentLink.audio.count\",\n    countMore: \"browsePage.contentLink.audio.countMore\",\n  },\n} satisfies KeyMapping\n\nconst collectionKeys = {\n  source: {\n    [IMAGE]: {\n      zero: \"collection.resultCountLabel.source.image.zero\",\n      count: \"collection.resultCountLabel.source.image.count\",\n      countMore: \"collection.resultCountLabel.source.image.countMore\",\n    },\n    [AUDIO]: {\n      zero: \"collection.resultCountLabel.source.audio.zero\",\n      count: \"collection.resultCountLabel.source.audio.count\",\n      countMore: \"collection.resultCountLabel.source.audio.countMore\",\n    },\n  },\n  creator: {\n    [IMAGE]: {\n      zero: \"collection.resultCountLabel.creator.image.zero\",\n      count: \"collection.resultCountLabel.creator.image.count\",\n      countMore: \"collection.resultCountLabel.creator.image.countMore\",\n    },\n    [AUDIO]: {\n      zero: \"collection.resultCountLabel.creator.audio.zero\",\n      count: \"collection.resultCountLabel.creator.audio.count\",\n      countMore: \"collection.resultCountLabel.creator.audio.countMore\",\n    },\n  },\n  tag: {\n    [IMAGE]: {\n      zero: \"collection.resultCountLabel.tag.image.zero\",\n      count: \"collection.resultCountLabel.tag.image.count\",\n      countMore: \"collection.resultCountLabel.tag.image.countMore\",\n    },\n    [AUDIO]: {\n      zero: \"collection.resultCountLabel.tag.audio.zero\",\n      count: \"collection.resultCountLabel.tag.audio.count\",\n      countMore: \"collection.resultCountLabel.tag.audio.countMore\",\n    },\n  },\n} satisfies Record<Collection, KeyMapping>\n\nexport function getCountKey(resultsCount: number): keyof KeyCollection {\n  return resultsCount === 0\n    ? \"zero\"\n    : resultsCount >= 240\n      ? \"countMore\"\n      : \"count\"\n}\n\n/**\n * Returns the localized text for the number of search results.\n */\nexport function useI18nResultsCount(showLoading?: ComputedRef<boolean>) {\n  const { t } = useNuxtApp().$i18n\n  const getLocaleFormattedNumber = useGetLocaleFormattedNumber()\n\n  const getLoading = () => t(\"header.loading\")\n\n  const getI18nKey = (\n    resultsCount: number,\n    searchType: SupportedSearchType\n  ) => {\n    if (showLoading?.value) {\n      return \"header.loading\"\n    }\n    const countKey = getCountKey(resultsCount)\n    return searchResultKeys[searchType][countKey]\n  }\n\n  const getI18nCollectionResultCountLabel = (\n    resultCount: number,\n    mediaType: SupportedMediaType,\n    collectionType: Collection,\n    params: Record<string, string> | undefined = undefined\n  ) => {\n    if (showLoading?.value) {\n      return \"\"\n    }\n    const key =\n      collectionKeys[collectionType][mediaType][getCountKey(resultCount)]\n    return t(key, {\n      count: resultCount,\n      localeCount: getLocaleFormattedNumber(resultCount),\n      ...params,\n    })\n  }\n\n  /**\n   * Returns the localized text for the number of search results, using corresponding\n   * pluralization rules and decimal separators.\n   * E.g. \"No results\", \"132 results\", \"Top 240 results\".\n   */\n  const getI18nCount = (resultsCount: number) => {\n    return t(getI18nKey(resultsCount, ALL_MEDIA), {\n      count: resultsCount,\n      localeCount: getLocaleFormattedNumber(resultsCount),\n    })\n  }\n\n  /**\n   * The result count labels for screen readers and visible text, used in the content links\n   * on all results page. Localized text for the number of search results, using corresponding\n   * pluralization rules and decimal separators.\n   * For the visible label, does not specify the media type, e.g.,\n   * \"Loading...\", \"No results\", \"132 results\", \"Top 240 results\".\n   * For the aria label, adds details about the media type and search query, e.g.,\n   * \"See 240 image results for 'cats'\".\n   */\n  const getResultCountLabels = (\n    resultsCount: number,\n    mediaType: SupportedMediaType,\n    query: string\n  ) => {\n    if (showLoading?.value) {\n      return { aria: getLoading(), visible: getLoading() }\n    }\n    return {\n      aria: t(getI18nKey(resultsCount, mediaType), {\n        count: resultsCount,\n        localeCount: getLocaleFormattedNumber(resultsCount),\n        query,\n        mediaType,\n      }),\n      visible: getI18nCount(resultsCount),\n    }\n  }\n\n  return {\n    getI18nCollectionResultCountLabel,\n    getResultCountLabels,\n    getI18nCount,\n  }\n}\n"],"names":["searchResultKeys","ALL_MEDIA","IMAGE","AUDIO","collectionKeys","getCountKey","resultsCount","useI18nResultsCount","showLoading","useNuxtApp","getLocaleFormattedNumber","useGetLocaleFormattedNumber","getLoading","getI18nKey","searchType","countKey","getI18nCollectionResultCountLabel","resultCount","mediaType","collectionType","params","key","getI18nCount","query"],"mappings":"mcAuBA,MAAMA,EAAmB,CACvB,CAACC,CAAS,EAAG,CACX,KAAM,0BACN,MAAO,4BACP,UAAW,+BACb,EACA,CAACC,CAAK,EAAG,CACP,KAAM,oCACN,MAAO,qCACP,UAAW,wCACb,EACA,CAACC,CAAK,EAAG,CACP,KAAM,oCACN,MAAO,qCACP,UAAW,wCAAA,CAEf,EAEMC,EAAiB,CACrB,OAAQ,CACN,CAACF,CAAK,EAAG,CACP,KAAM,gDACN,MAAO,iDACP,UAAW,oDACb,EACA,CAACC,CAAK,EAAG,CACP,KAAM,gDACN,MAAO,iDACP,UAAW,oDAAA,CAEf,EACA,QAAS,CACP,CAACD,CAAK,EAAG,CACP,KAAM,iDACN,MAAO,kDACP,UAAW,qDACb,EACA,CAACC,CAAK,EAAG,CACP,KAAM,iDACN,MAAO,kDACP,UAAW,qDAAA,CAEf,EACA,IAAK,CACH,CAACD,CAAK,EAAG,CACP,KAAM,6CACN,MAAO,8CACP,UAAW,iDACb,EACA,CAACC,CAAK,EAAG,CACP,KAAM,6CACN,MAAO,8CACP,UAAW,iDAAA,CACb,CAEJ,EAEO,SAASE,EAAYC,EAA2C,CACrE,OAAOA,IAAiB,EACpB,OACAA,GAAgB,IACd,YACA,OACR,CAKO,SAASC,EAAoBC,EAAoC,CACtE,KAAM,CAAE,CAAA,EAAMC,EAAA,EAAa,MACrBC,EAA2BC,EAA4B,EAEvDC,EAAa,IAAM,EAAE,gBAAgB,EAErCC,EAAa,CACjBP,EACAQ,IACG,CACH,GAAIN,GAAA,MAAAA,EAAa,MACR,MAAA,iBAEH,MAAAO,EAAWV,EAAYC,CAAY,EAClC,OAAAN,EAAiBc,CAAU,EAAEC,CAAQ,CAC9C,EAEMC,EAAoC,CACxCC,EACAC,EACAC,EACAC,EAA6C,SAC1C,CACH,GAAIZ,GAAA,MAAAA,EAAa,MACR,MAAA,GAEH,MAAAa,EACJjB,EAAee,CAAc,EAAED,CAAS,EAAEb,EAAYY,CAAW,CAAC,EACpE,OAAO,EAAEI,EAAK,CACZ,MAAOJ,EACP,YAAaP,EAAyBO,CAAW,EACjD,GAAGG,CAAA,CACJ,CACH,EAOME,EAAgBhB,GACb,EAAEO,EAAWP,EAAcL,CAAS,EAAG,CAC5C,MAAOK,EACP,YAAaI,EAAyBJ,CAAY,CAAA,CACnD,EA+BI,MAAA,CACL,kCAAAU,EACA,qBArB2B,CAC3BV,EACAY,EACAK,IAEIf,GAAA,MAAAA,EAAa,MACR,CAAE,KAAMI,EAAc,EAAA,QAASA,GAAa,EAE9C,CACL,KAAM,EAAEC,EAAWP,EAAcY,CAAS,EAAG,CAC3C,MAAOZ,EACP,YAAaI,EAAyBJ,CAAY,EAClD,MAAAiB,EACA,UAAAL,CAAA,CACD,EACD,QAASI,EAAahB,CAAY,CACpC,EAMA,aAAAgB,CACF,CACF"}