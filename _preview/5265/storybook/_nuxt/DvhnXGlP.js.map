{"version":3,"file":"DvhnXGlP.js","sources":["../../src/components/VAudioTrack/VAudioControl.vue"],"sourcesContent":["<script setup lang=\"ts\">\n/**\n * Displays the control for switching between the playing and paused states of\n * a media file.\n */\n\nimport { computed } from \"vue\"\n\nimport {\n  AudioLayout,\n  AudioStatus,\n  statusVerbMap,\n} from \"#shared/constants/audio\"\nimport type { ButtonConnections } from \"#shared/types/button\"\nimport { useHydrating } from \"~/composables/use-hydrating\"\n\nimport VIconButton from \"~/components/VIconButton/VIconButton.vue\"\n\nconst statusIconMap = {\n  playing: \"pause\",\n  paused: \"play\",\n  played: \"replay\",\n  loading: undefined,\n} as const\n\nconst layoutConnectionsMap: Record<AudioLayout, readonly ButtonConnections[]> =\n  {\n    row: [\"end\"],\n    global: [\"top\", \"end\"],\n    box: [],\n    full: [],\n  } as const\n\n/**\n * The mapping of audio control sizes to the VIconButton sizes\n * and the sizes of the contained icon.\n */\nconst sizes = {\n  small: { button: \"small\", icon: 6 },\n  medium: { button: \"large\", icon: 8 },\n  large: { button: \"larger\", icon: 10 },\n} as const\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * the current play status of the audio\n     */\n    status: AudioStatus\n    /**\n     * The size of the button. The size affects both the size of the button\n     * itself and the icon inside it.\n     */\n    size: \"small\" | \"medium\" | \"large\"\n    /**\n     * The parent audio layout currently in use. The connections are determined\n     * by the layout and the size of the button.\n     */\n    layout?: AudioLayout\n    /**\n     * Whether the audio control button can be focused by using the `Tab` key\n     */\n    isTabbable?: boolean\n  }>(),\n  {\n    layout: \"full\",\n    isTabbable: true,\n  }\n)\n\nconst emit = defineEmits<{\n  toggle: [\"paused\" | \"playing\"]\n}>()\n\nconst isPlaying = computed(() => props.status === \"playing\")\nconst isLoading = computed(() => props.status === \"loading\")\n/**\n * Get the button label based on the current status of the player.\n */\nconst label = computed(() => `playPause.${statusVerbMap[props.status]}`)\n/**\n * Get the button icon based on the current status of the player.\n */\nconst icon = computed(() => statusIconMap[props.status])\n\n/**\n * Set the connections (none-rounded corners) for the button based on the layout.\n */\nconst connections = computed(() => {\n  return props.layout === \"row\" && props.size === \"small\"\n    ? []\n    : [...layoutConnectionsMap[props.layout]]\n})\n\n/** Convert the `audio-control` sizes to `VIconButton` sizes */\nconst buttonSize = computed(() => sizes[props.size].button)\n\nconst iSize = computed(() => sizes[props.size].icon)\n\nconst handleMouseDown = (event: MouseEvent) => {\n  if (!props.isTabbable) {\n    // to prevent focus\n    event.preventDefault()\n  }\n}\nconst handleClick = () => {\n  emit(\"toggle\", isPlaying.value || isLoading.value ? \"paused\" : \"playing\")\n}\n\nconst { doneHydrating } = useHydrating()\n</script>\n\n<template>\n  <VIconButton\n    :tabindex=\"isTabbable ? 0 : -1\"\n    class=\"audio-control\"\n    :size=\"buttonSize\"\n    :variant=\"layout === 'box' ? 'transparent-dark' : 'filled-dark'\"\n    :icon-props=\"icon === undefined ? undefined : { name: icon, size: iSize }\"\n    :label=\"$t(label)\"\n    :connections=\"connections\"\n    :disabled=\"!doneHydrating\"\n    @click.stop.prevent=\"handleClick\"\n    @mousedown=\"handleMouseDown\"\n  >\n    <template #default>\n      <svg\n        v-if=\"isLoading\"\n        class=\"loading p-2\"\n        :class=\"`w-${iSize} h-${iSize}`\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        overflow=\"visible\"\n        viewBox=\"0 0 12 12\"\n      >\n        <circle cx=\"6\" cy=\"6\" r=\"6\" vector-effect=\"non-scaling-stroke\" />\n        <path\n          d=\"m 6 0 a 6 6 0 0 1 6 6\"\n          stroke=\"white\"\n          vector-effect=\"non-scaling-stroke\"\n        />\n      </svg>\n    </template>\n  </VIconButton>\n</template>\n\n<style scoped>\n@keyframes spinAnimation {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.loading circle,\n.loading path {\n  fill: transparent;\n  stroke-width: 2px;\n}\n\n.loading circle {\n  stroke: #595258;\n}\n\n.loading path {\n  stroke-linecap: round;\n  transform-origin: 50% 50%;\n  animation: spinAnimation 1.4s linear infinite both;\n}\n</style>\n"],"names":["statusIconMap","layoutConnectionsMap","sizes","props","__props","emit","__emit","isPlaying","computed","isLoading","label","statusVerbMap","icon","connections","buttonSize","iSize","handleMouseDown","event","handleClick","doneHydrating","useHydrating"],"mappings":"qsBAkBA,MAAMA,EAAgB,CACpB,QAAS,QACT,OAAQ,OACR,OAAQ,SACR,QAAS,MACX,EAEMC,EACJ,CACE,IAAK,CAAC,KAAK,EACX,OAAQ,CAAC,MAAO,KAAK,EACrB,IAAK,CAAC,EACN,KAAM,CAAA,CACR,EAMIC,EAAQ,CACZ,MAAO,CAAE,OAAQ,QAAS,KAAM,CAAE,EAClC,OAAQ,CAAE,OAAQ,QAAS,KAAM,CAAE,EACnC,MAAO,CAAE,OAAQ,SAAU,KAAM,EAAG,CACtC,EAEMC,EAAQC,EA2BRC,EAAOC,EAIPC,EAAYC,EAAS,IAAML,EAAM,SAAW,SAAS,EACrDM,EAAYD,EAAS,IAAML,EAAM,SAAW,SAAS,EAIrDO,EAAQF,EAAS,IAAM,aAAaG,EAAcR,EAAM,MAAM,CAAC,EAAE,EAIjES,EAAOJ,EAAS,IAAMR,EAAcG,EAAM,MAAM,CAAC,EAKjDU,EAAcL,EAAS,IACpBL,EAAM,SAAW,OAASA,EAAM,OAAS,QAC5C,CAAA,EACA,CAAC,GAAGF,EAAqBE,EAAM,MAAM,CAAC,CAC3C,EAGKW,EAAaN,EAAS,IAAMN,EAAMC,EAAM,IAAI,EAAE,MAAM,EAEpDY,EAAQP,EAAS,IAAMN,EAAMC,EAAM,IAAI,EAAE,IAAI,EAE7Ca,EAAmBC,GAAsB,CACxCd,EAAM,YAETc,EAAM,eAAe,CAEzB,EACMC,EAAc,IAAM,CACxBb,EAAK,SAAUE,EAAU,OAASE,EAAU,MAAQ,SAAW,SAAS,CAC1E,EAEM,CAAE,cAAAU,CAAc,EAAIC,EAAa;;"}