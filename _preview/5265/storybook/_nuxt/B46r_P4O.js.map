{"version":3,"file":"B46r_P4O.js","sources":["../../src/components/VModal/VModal.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, computed, SetupContext } from \"vue\"\n\nimport type { ModalColorMode, ModalVariant } from \"#shared/types/modal\"\nimport { useDialogControl } from \"~/composables/use-dialog-control\"\n\nimport VModalContent from \"~/components/VModal/VModalContent.vue\"\n\n/**\n * NB: Most of these technically default to `undefined` so that the underlying `VModalContent`\n * default for each of them can take over.\n */\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * Whether the popover should hide when the <kbd>Escape</kbd> key is pressed.\n     *\n     * @default true\n     */\n    hideOnEsc?: boolean\n    /**\n     * Whether the popover should hide when a click happens outside the popover content,\n     * excluding the trigger. When the trigger is clicked and the popover is open, nothing\n     * will happen.\n     *\n     * @default true\n     */\n    hideOnClickOutside?: boolean\n    /**\n     * Whether the popover content should automatically receive focus when the popover\n     * opens.\n     *\n     * @default true\n     */\n    autoFocusOnShow?: boolean\n    /**\n     * Whether the trigger should automatically receive focus when the popover closes.\n     *\n     * @default true\n     */\n    autoFocusOnHide?: boolean\n    /**\n     * The label of the popover content. Must be provided if `labelledBy` is empty.\n     *\n     * @default undefined\n     */\n    label?: string\n    /**\n     * The id of the element labelling the popover content. Must be provided if `label` is empty.\n     *\n     * @default undefined\n     */\n    labelledBy?: string\n    /**\n     * The element to focus when the modal is opened. If nothing is\n     * passed, then the first tabbable element in the modal content\n     * will be focused. If no tabbable element is found in the modal\n     * content, then the entire modal content itself will be focused.\n     *\n     * @default undefined\n     */\n    initialFocusElement?: HTMLElement\n    /**\n     * The variant of the modal content.\n     * The `default` variant is a full-screen modal on mobile widths, and is a smaller mobile\n     * on a grayed out backdrop on larger screens.\n     *\n     * The `full` variant is a full-screen modal on all screen widths. It is currently\n     * only used for mobile version of the `VHeaderInternal` component.\n     *\n     * @default 'default'\n     */\n    variant?: ModalVariant\n    /**\n     * The color mode of the modal content.\n     * The default `light` mode uses dark charcoal content on the white background.\n     * The `dark` mode uses white content on the dark charcoal background.\n     *\n     * @default 'light'\n     */\n    mode?: ModalColorMode\n    modalContentClasses?: string\n    /**\n     * The id used to keep track of the modal in the open dialog stack, to enable\n     * nested dialogs.\n     */\n    id: string\n  }>(),\n  {\n    hideOnEsc: true,\n    hideOnClickOutside: false,\n    autoFocusOnShow: true,\n    autoFocusOnHide: true,\n    initialFocusElement: undefined,\n    variant: \"default\",\n    mode: \"light\",\n    modalContentClasses: \"\",\n  }\n)\n\nconst emit = defineEmits<{\n  /**\n   * Fires when the popover opens, regardless of reason. There are no extra parameters.\n   */\n  open: []\n  /**\n   * Fires when the popover closes, regardless of reason. There are no extra parameters.\n   */\n  close: []\n}>()\n\nconst nodeRef = ref<null | HTMLElement>(null)\nconst modalContentRef = ref<InstanceType<typeof VModalContent> | null>(null)\nconst triggerContainerRef = ref<HTMLElement | null>(null)\n\nconst triggerRef = computed(\n  () => triggerContainerRef.value?.firstElementChild as HTMLElement | undefined\n)\n\nconst deactivateFocusTrap = computed(\n  () => modalContentRef.value?.deactivateFocusTrap\n)\n\nconst {\n  close,\n  onTriggerClick,\n  triggerA11yProps,\n  visible: visibleRef,\n} = useDialogControl({\n  id: props.id,\n  lockBodyScroll: true,\n  nodeRef,\n  emit: emit as SetupContext[\"emit\"],\n  deactivateFocusTrap,\n})\n\ndefineExpose({\n  close,\n})\n</script>\n\n<template>\n  <div ref=\"nodeRef\">\n    <!-- re: disabled static element interactions rule https://github.com/WordPress/openverse/issues/2906 -->\n    <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n    <div ref=\"triggerContainerRef\" class=\"flex\" @click=\"onTriggerClick\">\n      <!--\n        @slot The trigger. Should be a button 99% of the time. If you need custom event handling on the trigger button, ensure bubbling is not prevented or else the dialog will not open.\n          @binding {object} a11yProps Props to v-bind to the trigger element to ensure accessibility\n          @binding {boolean} visible Whether the dialog is currently visible (open)\n      -->\n      <slot\n        name=\"trigger\"\n        :a11y-props=\"triggerA11yProps\"\n        :visible=\"visibleRef\"\n      />\n    </div>\n    <VModalContent\n      v-if=\"triggerRef\"\n      :id=\"id\"\n      ref=\"modalContentRef\"\n      :visible=\"visibleRef\"\n      :trigger-element=\"triggerRef\"\n      :hide-on-esc=\"hideOnEsc\"\n      :hide-on-click-outside=\"hideOnClickOutside\"\n      :auto-focus-on-show=\"autoFocusOnShow\"\n      :auto-focus-on-hide=\"autoFocusOnHide\"\n      :hide=\"close\"\n      :aria-label=\"label\"\n      :aria-labelledby=\"labelledBy\"\n      :initial-focus-element=\"initialFocusElement\"\n      :variant=\"variant\"\n      :mode=\"mode\"\n      :content-classes=\"modalContentClasses\"\n    >\n      <template #top-bar=\"{ close: hide }\">\n        <slot name=\"top-bar\" :close=\"hide\" />\n      </template>\n      <template #title><slot name=\"title\" /></template>\n      <template #close-button=\"{ close: hide }\"\n        ><slot name=\"close-button\" :close=\"hide\"\n      /></template>\n      <slot name=\"default\" />\n    </VModalContent>\n  </div>\n</template>\n"],"names":["props","__props","emit","__emit","nodeRef","ref","modalContentRef","triggerContainerRef","triggerRef","computed","_a","deactivateFocusTrap","close","onTriggerClick","triggerA11yProps","visibleRef","useDialogControl","__expose"],"mappings":"q3BAYA,MAAMA,EAAQC,EAwFRC,EAAOC,EAWPC,EAAUC,EAAwB,IAAI,EACtCC,EAAkBD,EAA+C,IAAI,EACrEE,EAAsBF,EAAwB,IAAI,EAElDG,EAAaC,EACjB,IAAM,OAAA,OAAAC,EAAAH,EAAoB,QAApB,YAAAG,EAA2B,kBACnC,EAEMC,EAAsBF,EAC1B,IAAM,OAAA,OAAAC,EAAAJ,EAAgB,QAAhB,YAAAI,EAAuB,oBAC/B,EAEM,CACJ,MAAAE,EACA,eAAAC,EACA,iBAAAC,EACA,QAASC,GACPC,EAAiB,CACnB,GAAIhB,EAAM,GACV,eAAgB,GAChB,QAAAI,EACA,KAAAF,EACA,oBAAAS,CAAA,CACD,EAEY,OAAAM,EAAA,CACX,MAAAL,CAAA,CACD;;;;;;;"}