{"version":3,"file":"ChZpVpQj.js","sources":["../../src/components/VCheckbox/VCheckbox.vue"],"sourcesContent":["<script setup lang=\"ts\">\n/**\n * A checkbox input component that allows selection of multiple options from a list .\n *\n * Unlike the native checkbox, this component only has two states: checked / not checked.\n */\nimport { computed, ref, watch } from \"vue\"\n\nimport VIcon from \"~/components/VIcon/VIcon.vue\"\n\nexport type CheckboxAttrs = {\n  name: string\n  value: string\n  disabled?: \"disabled\" | undefined\n  checked?: boolean\n}\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * Checkbox `id` is used for the input id property, connecting the label to\n     * the checkbox. id is also used in the `change` event payload as the `name`\n     * and `value` parameters if they are not set.\n     */\n    id: string\n    /**\n     * Whether the checkbox is checked or not. No indeterminate state is allowed.\n     *\n     * @default false\n     */\n    checked?: boolean\n    /**\n     * Usually this is the category that this checkbox belongs to, e.g. 'license' for a\n     * 'by-nc-nd' checkbox, or 'licenseType' for 'commercial' checkbox.\n     * This parameter is used in the emitted object.\n     *\n     * If the form submission is done natively, the name and value parameters are used\n     * when sending the form data to the server on form submit: if a checkbox is checked,\n     * `name=value` pair is added to the POST request body.\n     *\n     * If not set, the value of `id` prop is used instead.\n     */\n    name?: string\n    /**\n     * The value parameter in `name=value` pair sent in the POST request body, here\n     * emitted in the event's payload. Usually the code as 'by-nc-nd'.\n     *\n     * If not set, the value of `id` prop is used.\n     */\n    value?: string\n    /**\n     * Sets disabled property of the input and changes label opacity if set to true.\n     */\n    disabled?: boolean\n    /**\n     * whether to make the checkbox appear like a switch\n     */\n    isSwitch?: boolean\n  }>(),\n  {\n    checked: false,\n    isSwitch: false,\n  }\n)\n\nconst emit = defineEmits<{ change: [Omit<CheckboxAttrs, \"disabled\">] }>()\nconst localCheckedState = ref(props.checked || false)\nconst labelClasses = computed(() =>\n  props.disabled ? \"text-disabled\" : \"text-default\"\n)\nconst inputAttrs = computed<CheckboxAttrs>(() => {\n  const attrs: CheckboxAttrs = {\n    name: props.name || props.id,\n    value: props.value || props.id,\n  }\n  if (localCheckedState.value) {\n    attrs.checked = true\n  }\n  return attrs\n})\n\nwatch(\n  () => props.checked,\n  (checked) => {\n    if (checked !== localCheckedState.value) {\n      localCheckedState.value = checked\n    }\n  }\n)\n\nconst onChange = () => {\n  localCheckedState.value = !localCheckedState.value\n  emit(\"change\", {\n    name: inputAttrs.value.name,\n    value: inputAttrs.value.value,\n    checked: localCheckedState.value,\n  })\n}\n</script>\n\n<template>\n  <label\n    :for=\"id\"\n    class=\"relative flex text-sm leading-5\"\n    :class=\"labelClasses\"\n  >\n    <span class=\"relative block\">\n      <!--\n      The checkbox focus style is a slight variation on the `focus-slim-tx` style.\n      Because it becomes filled when checked, it also needs the\n      `checked:focus-visible:border-bg-ring` class.\n      -->\n      <input\n        :id=\"id\"\n        type=\"checkbox\"\n        class=\"me-3 block appearance-none border border-tertiary bg-default transition-colors duration-100 checked:bg-tertiary disabled:border-disabled disabled:bg-secondary checked:disabled:border-disabled checked:disabled:bg-disabled\"\n        :class=\"\n          isSwitch\n            ? ['h-4.5', 'w-9', 'rounded-full', 'focus-slim-offset']\n            : [\n                'h-5',\n                'w-5',\n                'rounded-sm',\n                'focus-visible:focus-slim-tx',\n                'checked:focus-visible:border-bg-ring',\n              ]\n        \"\n        v-bind=\"inputAttrs\"\n        :disabled=\"disabled ? true : undefined\"\n        @click=\"onChange\"\n      />\n\n      <!-- Knob, for when `ifSwitch` is `true` -->\n      <span\n        v-if=\"isSwitch\"\n        class=\"absolute left-0.75 top-0.75 block h-3 w-3 rounded-full transition-transform duration-100\"\n        :class=\"\n          localCheckedState\n            ? ['bg-default', 'translate-x-[1.125rem]']\n            : disabled\n              ? ['bg-disabled']\n              : ['bg-tertiary']\n        \"\n        aria-hidden=\"true\"\n      />\n\n      <!-- Checkmark, for when `ifSwitch` is `false` -->\n      <VIcon\n        v-else\n        v-show=\"localCheckedState\"\n        class=\"pointer-events-none absolute inset-0 transform text-over-dark\"\n        name=\"check\"\n        :size=\"5\"\n      />\n    </span>\n\n    <!--  @slot The checkbox label  --><slot />\n  </label>\n</template>\n"],"names":["props","__props","emit","__emit","localCheckedState","ref","labelClasses","computed","inputAttrs","attrs","watch","checked","onChange"],"mappings":"usBAiBA,MAAMA,EAAQC,EAgDRC,EAAOC,EACPC,EAAoBC,EAAIL,EAAM,SAAW,EAAK,EAC9CM,EAAeC,EAAS,IAC5BP,EAAM,SAAW,gBAAkB,cACrC,EACMQ,EAAaD,EAAwB,IAAM,CAC/C,MAAME,EAAuB,CAC3B,KAAMT,EAAM,MAAQA,EAAM,GAC1B,MAAOA,EAAM,OAASA,EAAM,EAC9B,EACA,OAAII,EAAkB,QACpBK,EAAM,QAAU,IAEXA,CAAA,CACR,EAEDC,EACE,IAAMV,EAAM,QACXW,GAAY,CACPA,IAAYP,EAAkB,QAChCA,EAAkB,MAAQO,EAC5B,CAEJ,EAEA,MAAMC,EAAW,IAAM,CACHR,EAAA,MAAQ,CAACA,EAAkB,MAC7CF,EAAK,SAAU,CACb,KAAMM,EAAW,MAAM,KACvB,MAAOA,EAAW,MAAM,MACxB,QAASJ,EAAkB,KAAA,CAC5B,CACH;;;;;;;;"}