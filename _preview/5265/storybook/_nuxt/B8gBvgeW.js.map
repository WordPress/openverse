{"version":3,"file":"B8gBvgeW.js","sources":["../../src/composables/use-match-routes.ts"],"sourcesContent":["import { useRoute, useRouter } from \"#imports\"\nimport { ref, Ref } from \"vue\"\n\nimport {\n  ALL_MEDIA,\n  searchTypes,\n  supportedSearchTypes,\n} from \"#shared/constants/media\"\nimport { getRouteNameString } from \"#shared/utils/route-utils\"\nimport usePages from \"~/composables/use-pages\"\n\n/**\n * Reactive property that returns true only on the matching routes.\n * Note that routes are matched by their non-localized name.\n *\n */\nexport const useMatchRoute = (\n  routes: string[] = []\n): { matches: Ref<boolean> } => {\n  const route = useRoute()\n  const router = useRouter()\n\n  /**\n   * The route name is localized, so it includes the locale code after `__`.\n   * We remove the locale from the route name to match it with the\n   * non-localized routes array.\n   *\n   * @param route - the localized route name (e.g. `search__en`)\n   */\n  const routeNameMatches = (route: string | null | undefined) => {\n    if (!route) {\n      return false\n    }\n    return routes.includes(route.split(\"__\")[0])\n  }\n\n  const matches = ref(routeNameMatches(getRouteNameString(route)))\n\n  router.beforeEach((to, _from, next) => {\n    matches.value = routeNameMatches(getRouteNameString(to))\n    next()\n  })\n\n  return { matches }\n}\n\n/**\n * Reactive property that returns true only on the `search` routes.\n * Homepage, single image result and other content pages return `false`\n */\nexport const useMatchSearchRoutes = () => {\n  const routes = [\n    \"search\",\n    ...searchTypes\n      .filter((type) => type !== ALL_MEDIA)\n      .map((type) => `search-${type}`),\n  ]\n  return useMatchRoute(routes)\n}\n\n/**\n * Reactive property that returns true only on the `single result` and `full-page report` routes.\n * Homepage, search results and other content pages return `false`\n */\nexport const useMatchSingleResultRoutes = () => {\n  const routes = [\n    ...supportedSearchTypes\n      .filter((name) => name !== ALL_MEDIA)\n      .map((name) => `${name}-id`),\n  ]\n  // @TODO Switch to more generic implementation once\n  // an Audio reporting page is designed.\n  //\n  // routes = routes.concat(routes.map((name) => `${name}-report`))\n  routes.push(\"image-id-report\")\n\n  return useMatchRoute(routes)\n}\n\n/**\n * Reactive property that returns true only on the 'content' routes:\n * about, search help, etc. and the preferences page.\n */\nexport const useMatchContentPageRoutes = () => {\n  const routes = usePages()\n    .all.filter((page) => page.link.startsWith(\"/\"))\n    .map((page) => page.id)\n  routes.push(\"preferences\")\n  return useMatchRoute(routes)\n}\nexport const useMatchHomeRoute = () => useMatchRoute([\"index\"])\n"],"names":["useMatchRoute","routes","route","useRoute","router","useRouter","routeNameMatches","matches","ref","getRouteNameString","to","_from","next","useMatchSearchRoutes","searchTypes","type","ALL_MEDIA","useMatchSingleResultRoutes","supportedSearchTypes","name"],"mappings":"kgBAgBO,MAAMA,EAAgB,CAC3BC,EAAmB,KACW,CAC9B,MAAMC,EAAQC,EAAS,EACjBC,EAASC,EAAU,EASnBC,EAAoBJ,GACnBA,EAGED,EAAO,SAASC,EAAM,MAAM,IAAI,EAAE,CAAC,CAAC,EAFlC,GAKLK,EAAUC,EAAIF,EAAiBG,EAAmBP,CAAK,CAAC,CAAC,EAE/D,OAAAE,EAAO,WAAW,CAACM,EAAIC,EAAOC,IAAS,CACrCL,EAAQ,MAAQD,EAAiBG,EAAmBC,CAAE,CAAC,EAClDE,EAAA,CAAA,CACN,EAEM,CAAE,QAAAL,CAAQ,CACnB,EAMaM,EAAuB,IAAM,CACxC,MAAMZ,EAAS,CACb,SACA,GAAGa,EACA,OAAQC,GAASA,IAASC,CAAS,EACnC,IAAKD,GAAS,UAAUA,CAAI,EAAE,CACnC,EACA,OAAOf,EAAcC,CAAM,CAC7B,EAMagB,EAA6B,IAAM,CAC9C,MAAMhB,EAAS,CACb,GAAGiB,EACA,OAAQC,GAASA,IAASH,CAAS,EACnC,IAAKG,GAAS,GAAGA,CAAI,KAAK,CAC/B,EAKA,OAAAlB,EAAO,KAAK,iBAAiB,EAEtBD,EAAcC,CAAM,CAC7B"}