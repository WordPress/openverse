{"version":3,"file":"DoSYsHAz.js","sources":["../../src/components/VIcon/VIcon.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\"\n\nimport { useSprite } from \"~/composables/use-sprite\"\n/**\n * Vendored from SVG Sprite Module https://github.com/nuxt-modules/svg-sprite\n * The module had problem with handling the source code that is inside `/src` directory.\n * Displays the given icon in a 24px Ã— 24px square.\n */\nexport type IconProps = {\n  /**\n   * The name of the icon. For options, @see \"~/assets/svg/sprite/icons.svg\"\n   * and \"~/assets/svg/sprite/licenses.svg\".\n   */\n  name: string\n  viewBox?: string\n  gId?: string\n  size?: number\n  rtlFlip?: boolean\n}\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * the path to the icon SVG; In a bundled application like Openverse,\n     * importing an SVG should give us the path to the file.\n     */\n    name: string\n    viewBox?: string\n    /**\n     * the ID of the `g` element to import from the icon; This element should\n     * ideally have the `id` as \"icon\" and the `fill` as `currentColor`.\n     */\n    gId?: string\n    /**\n     * The size of the icon based on tailwind values. Possible values:\n     * 4 - 1rem, 5 - 1.25rem, 6 - 1.5rem, 8 - 2rem, 10 - 2.5rem,  12 - 3rem.\n     *\n     * @default 6\n     */\n    size?: number\n    /**\n     * whether to flip the icon for RTL languages; This generally makes sense\n     * for directional icons such as those involving arrows.\n     */\n    rtlFlip?: boolean\n  }>(),\n  {\n    viewBox: \"0 0 24 24\",\n    gId: \"icon\",\n    size: 6,\n    rtlFlip: false,\n  }\n)\n\nif (!props.viewBox.split(\" \").every((v) => !isNaN(parseInt(v)))) {\n  throw new Error(\n    `Invalid viewBox \"${props.viewBox}\" for icon \"${props.name}\".`\n  )\n}\nif (![4, 5, 6, 8, 10, 12].includes(props.size)) {\n  throw new Error(`Invalid size \"${props.size}\" for icon \"${props.name}\".`)\n}\n\nconst icon = ref({\n  url: \"\",\n  class: \"\",\n})\n\nicon.value = useSprite(\n  props.name.includes(\"/\") ? props.name : `icons/${props.name}`\n)\n\nwatch(\n  () => props.name,\n  (name) => {\n    icon.value = useSprite(name)\n  }\n)\n</script>\n\n<template>\n  <svg\n    :viewBox=\"viewBox\"\n    focusable=\"false\"\n    class=\"v-icon flex-none\"\n    :class=\"[`w-${size}`, `h-${size}`, { 'rtl-flip': rtlFlip }, icon.class]\"\n    aria-hidden=\"true\"\n  >\n    <use :href=\"icon.url\" />\n  </svg>\n</template>\n\n<style scoped>\n[dir=\"rtl\"] .v-icon.rtl-flip {\n  @apply -scale-x-100 transform;\n}\n</style>\n"],"names":["props","__props","v","icon","ref","useSprite","watch","name"],"mappings":"2nBAoBA,MAAMA,EAAQC,EAkCd,GAAI,CAACD,EAAM,QAAQ,MAAM,GAAG,EAAE,MAAOE,GAAM,CAAC,MAAM,SAASA,CAAC,CAAC,CAAC,EAC5D,MAAM,IAAI,MACR,oBAAoBF,EAAM,OAAO,eAAeA,EAAM,IAAI,IAC5D,EAEF,GAAI,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAE,EAAE,SAASA,EAAM,IAAI,EACrC,MAAA,IAAI,MAAM,iBAAiBA,EAAM,IAAI,eAAeA,EAAM,IAAI,IAAI,EAG1E,MAAMG,EAAOC,EAAI,CACf,IAAK,GACL,MAAO,EAAA,CACR,EAED,OAAAD,EAAK,MAAQE,EACXL,EAAM,KAAK,SAAS,GAAG,EAAIA,EAAM,KAAO,SAASA,EAAM,IAAI,EAC7D,EAEAM,EACE,IAAMN,EAAM,KACXO,GAAS,CACHJ,EAAA,MAAQE,EAAUE,CAAI,CAAA,CAE/B;;;"}