{"version":3,"file":"6EtbFbqO.js","sources":["../../src/composables/use-resize-observer.ts"],"sourcesContent":["import { ref, onMounted, onBeforeUnmount } from \"vue\"\nimport type { Ref } from \"vue\"\n\ninterface Options {\n  initialWidth?: number\n  initialHeight?: number\n}\n/**\n * Configure a `ResizeObserver` to observe the given `HTMLElement` and update\n * the dimensions whenever it is resized.\n *\n * @param elem - the ref pointing to the `HTMLElement` to observe\n * @param options - the options to pass to the `ResizeObserver`, can be used to\n * pass the initial dimensions.\n */\nexport default function useResizeObserver(\n  elem: Ref<HTMLElement | null>,\n  options: Options = {}\n) {\n  const initialDimensions = {\n    width: options.initialWidth || 0,\n    height: options.initialHeight || 0,\n  }\n  const dimens = ref(initialDimensions)\n  const updateDimens = () => {\n    dimens.value = {\n      width: elem.value?.clientWidth || 0,\n      height: elem.value?.clientHeight || 0,\n    }\n  }\n\n  let observer: ResizeObserver | undefined\n  onMounted(() => {\n    if (window.ResizeObserver && elem.value) {\n      observer = new ResizeObserver(updateDimens)\n      observer.observe(elem.value)\n    }\n    updateDimens()\n  })\n  onBeforeUnmount(() => {\n    if (observer) {\n      observer.disconnect()\n    }\n  })\n\n  return { dimens }\n}\n"],"names":["useResizeObserver","elem","options","initialDimensions","dimens","ref","updateDimens","_a","_b","observer","onMounted","onBeforeUnmount"],"mappings":"+XAeA,SAAwBA,EACtBC,EACAC,EAAmB,GACnB,CACA,MAAMC,EAAoB,CACxB,MAAOD,EAAQ,cAAgB,EAC/B,OAAQA,EAAQ,eAAiB,CACnC,EACME,EAASC,EAAIF,CAAiB,EAC9BG,EAAe,IAAM,SACzBF,EAAO,MAAQ,CACb,QAAOG,EAAAN,EAAK,QAAL,YAAAM,EAAY,cAAe,EAClC,SAAQC,EAAAP,EAAK,QAAL,YAAAO,EAAY,eAAgB,CACtC,CACF,EAEI,IAAAC,EACJ,OAAAC,EAAU,IAAM,CACV,OAAO,gBAAkBT,EAAK,QACrBQ,EAAA,IAAI,eAAeH,CAAY,EACjCG,EAAA,QAAQR,EAAK,KAAK,GAEhBK,EAAA,CAAA,CACd,EACDK,EAAgB,IAAM,CAChBF,GACFA,EAAS,WAAW,CACtB,CACD,EAEM,CAAE,OAAAL,CAAO,CAClB"}