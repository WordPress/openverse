{"version":3,"file":"CcNWDV0w.js","sources":["../../src/composables/use-get-locale-formatted-number.ts"],"sourcesContent":["import { useNuxtApp } from \"#imports\"\n\nconst WESTERN_ARABIC_NUMERALS = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n]\n\n/**\n * Guards number formatting to prevent using Eastern Arabic Numerals,\n * instead always using Western Arabic Numerals but still respecting\n * the locale preferences for delimiters.\n */\nexport const useGetLocaleFormattedNumber = (\n  locale: string | undefined = undefined\n) => {\n  const i18n = useNuxtApp().$i18n\n\n  return (n: number) => {\n    const testFormat = n.toLocaleString(locale ?? i18n.locale.value)\n\n    if (\n      WESTERN_ARABIC_NUMERALS.some((numeral) => testFormat.includes(numeral))\n    ) {\n      return testFormat\n    }\n\n    return n.toLocaleString(\"en\")\n  }\n}\n"],"names":["WESTERN_ARABIC_NUMERALS","useGetLocaleFormattedNumber","locale","i18n","useNuxtApp","testFormat","numeral"],"mappings":"iXAEA,MAAMA,EAA0B,CAC9B,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACF,EAOaC,EAA8B,CACzCC,EAA6B,SAC1B,CACG,MAAAC,EAAOC,IAAa,MAE1B,OAAQ,GAAc,CACpB,MAAMC,EAAa,EAAE,eAAeH,GAAUC,EAAK,OAAO,KAAK,EAG7D,OAAAH,EAAwB,KAAMM,GAAYD,EAAW,SAASC,CAAO,CAAC,EAE/DD,EAGF,EAAE,eAAe,IAAI,CAC9B,CACF"}