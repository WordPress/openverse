{"version":3,"file":"axgLztSI.js","sources":["../../src/components/VThemeSelect/VThemeSelect.vue"],"sourcesContent":["<!--\nPresent users with a way to change the app theme between three options:\nlight, dark and system.\n-->\n\n<script setup lang=\"ts\">\nimport { useI18n } from \"#imports\"\nimport { computed, ref, onMounted, watch, type Ref } from \"vue\"\n\nimport { useUiStore, type ColorMode } from \"~/stores/ui\"\nimport { useDarkMode } from \"~/composables/use-dark-mode\"\n\nimport VIcon from \"~/components/VIcon/VIcon.vue\"\nimport VSelectField, {\n  type Choice,\n} from \"~/components/VSelectField/VSelectField.vue\"\n\nconst i18n = useI18n({ useScope: \"global\" })\nconst uiStore = useUiStore()\n\nconst THEME_ICON_NAME = Object.freeze({\n  light: \"sun\",\n  dark: \"moon\",\n  system: \"duotone\",\n})\n\nconst THEME_TEXT = {\n  light: i18n.t(`theme.choices.light`),\n  dark: i18n.t(`theme.choices.dark`),\n  system: i18n.t(`theme.choices.system`),\n}\n\nconst colorMode: Ref<ColorMode> = ref(uiStore.colorMode)\nconst handleUpdateModelValue = (value: string) => {\n  uiStore.setColorMode(value as ColorMode)\n}\n\nconst isDarkModeSeen = computed(() => uiStore.isDarkModeSeen)\nconst setIsDarkModeSeen = () => {\n  uiStore.setIsDarkModeSeen(true)\n}\n\nconst darkMode = useDarkMode()\n\nconst currentThemeIcon: Ref<\"sun\" | \"moon\" | \"duotone\"> = ref(\n  THEME_ICON_NAME[darkMode.colorMode.value]\n)\n\n/**\n * The choices are computed because the text for the color mode choice\n * \"system\" is dynamic and reflects the user's preferred color scheme at\n * the OS-level.\n */\nconst choices: Ref<Choice[]> = ref([\n  { key: \"light\", text: THEME_TEXT.light },\n  { key: \"dark\", text: THEME_TEXT.dark },\n  { key: \"system\", text: THEME_TEXT.system },\n])\n\nconst updateRefs = () => {\n  colorMode.value = uiStore.colorMode\n  currentThemeIcon.value = THEME_ICON_NAME[darkMode.colorMode.value]\n  choices.value[2].text = `${THEME_TEXT.system} (${THEME_TEXT[darkMode.osColorMode.value]})`\n}\n\nonMounted(updateRefs)\nwatch(() => [darkMode.colorMode.value, darkMode.osColorMode.value], updateRefs)\n</script>\n\n<template>\n  <VSelectField\n    :model-value=\"colorMode\"\n    field-id=\"theme\"\n    :choices=\"choices\"\n    :blank-text=\"$t('theme.theme')\"\n    :label-text=\"$t('theme.theme')\"\n    :show-selected=\"false\"\n    :show-new-highlight=\"!isDarkModeSeen\"\n    @focus=\"setIsDarkModeSeen\"\n    @update:model-value=\"handleUpdateModelValue\"\n  >\n    <template #start>\n      <VIcon :name=\"currentThemeIcon\" />\n    </template>\n  </VSelectField>\n</template>\n"],"names":["i18n","useI18n","uiStore","useUiStore","THEME_ICON_NAME","THEME_TEXT","colorMode","ref","handleUpdateModelValue","value","isDarkModeSeen","computed","setIsDarkModeSeen","darkMode","useDarkMode","currentThemeIcon","choices","updateRefs","onMounted","watch"],"mappings":"kmBAiBA,MAAMA,EAAOC,EAAQ,CAAE,SAAU,SAAU,EACrCC,EAAUC,EAAW,EAErBC,EAAkB,OAAO,OAAO,CACpC,MAAO,MACP,KAAM,OACN,OAAQ,SAAA,CACT,EAEKC,EAAa,CACjB,MAAOL,EAAK,EAAE,qBAAqB,EACnC,KAAMA,EAAK,EAAE,oBAAoB,EACjC,OAAQA,EAAK,EAAE,sBAAsB,CACvC,EAEMM,EAA4BC,EAAIL,EAAQ,SAAS,EACjDM,EAA0BC,GAAkB,CAChDP,EAAQ,aAAaO,CAAkB,CACzC,EAEMC,EAAiBC,EAAS,IAAMT,EAAQ,cAAc,EACtDU,EAAoB,IAAM,CAC9BV,EAAQ,kBAAkB,EAAI,CAChC,EAEMW,EAAWC,EAAY,EAEvBC,EAAoDR,EACxDH,EAAgBS,EAAS,UAAU,KAAK,CAC1C,EAOMG,EAAyBT,EAAI,CACjC,CAAE,IAAK,QAAS,KAAMF,EAAW,KAAM,EACvC,CAAE,IAAK,OAAQ,KAAMA,EAAW,IAAK,EACrC,CAAE,IAAK,SAAU,KAAMA,EAAW,MAAO,CAAA,CAC1C,EAEKY,EAAa,IAAM,CACvBX,EAAU,MAAQJ,EAAQ,UAC1Ba,EAAiB,MAAQX,EAAgBS,EAAS,UAAU,KAAK,EACjEG,EAAQ,MAAM,CAAC,EAAE,KAAO,GAAGX,EAAW,MAAM,KAAKA,EAAWQ,EAAS,YAAY,KAAK,CAAC,GACzF,EAEA,OAAAK,EAAUD,CAAU,EACdE,EAAA,IAAM,CAACN,EAAS,UAAU,MAAOA,EAAS,YAAY,KAAK,EAAGI,CAAU"}