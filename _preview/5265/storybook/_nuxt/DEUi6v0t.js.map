{"version":3,"file":"DEUi6v0t.js","sources":["../../../node_modules/.pnpm/nuxt@3.15.1_@parcel+watcher@2.4.1_@types+node@22.8.5_db0@0.1.4_encoding@0.1.13_eslint@9.13.0__p6pp5ym65s56ibxfvk3gng4uxm/node_modules/nuxt/dist/app/composables/state.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/messages.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/compatibility.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/utils.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/routing.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/routing/compatibles/head.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/utils.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/internal.js","../../../node_modules/.pnpm/@nuxtjs+i18n@9.1.1_@vue+compiler-dom@3.5.13_eslint@9.13.0_jiti@2.4.2__magicast@0.3.5_rollup@4_tv4p5ybxhqqmvgowho4qvjjtmu/node_modules/@nuxtjs/i18n/dist/runtime/composables/index.js"],"sourcesContent":["import { isRef, toRef } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nconst useStateKeyPrefix = \"$s\";\nexport function useState(...args) {\n  const autoKey = typeof args[args.length - 1] === \"string\" ? args.pop() : void 0;\n  if (typeof args[0] !== \"string\") {\n    args.unshift(autoKey);\n  }\n  const [_key, init] = args;\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useState] key must be a string: \" + _key);\n  }\n  if (init !== void 0 && typeof init !== \"function\") {\n    throw new Error(\"[nuxt] [useState] init must be a function: \" + init);\n  }\n  const key = useStateKeyPrefix + _key;\n  const nuxtApp = useNuxtApp();\n  const state = toRef(nuxtApp.payload.state, key);\n  if (state.value === void 0 && init) {\n    const initialValue = init();\n    if (isRef(initialValue)) {\n      nuxtApp.payload.state[key] = initialValue;\n      return initialValue;\n    }\n    state.value = initialValue;\n  }\n  return state;\n}\nexport function clearNuxtState(keys) {\n  const nuxtApp = useNuxtApp();\n  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));\n  const _keys = !keys ? _allKeys : typeof keys === \"function\" ? _allKeys.filter(keys) : toArray(keys);\n  for (const _key of _keys) {\n    const key = useStateKeyPrefix + _key;\n    if (key in nuxtApp.payload.state) {\n      nuxtApp.payload.state[key] = void 0;\n    }\n  }\n}\n","import { deepCopy, isFunction, isArray, isObject, isString } from \"@intlify/shared\";\nimport { createLogger } from \"virtual:nuxt-i18n-logger\";\nconst cacheMessages = /* @__PURE__ */ new Map();\nexport async function loadVueI18nOptions(vueI18nConfigs, nuxt) {\n  const vueI18nOptions = { messages: {} };\n  for (const configFile of vueI18nConfigs) {\n    const { default: resolver } = await configFile();\n    const resolved = isFunction(resolver) ? await nuxt.runWithContext(async () => await resolver()) : resolver;\n    deepCopy(resolved, vueI18nOptions);\n  }\n  return vueI18nOptions;\n}\nexport function makeFallbackLocaleCodes(fallback, locales) {\n  let fallbackLocales = [];\n  if (isArray(fallback)) {\n    fallbackLocales = fallback;\n  } else if (isObject(fallback)) {\n    const targets = [...locales, \"default\"];\n    for (const locale of targets) {\n      if (fallback[locale]) {\n        fallbackLocales = [...fallbackLocales, ...fallback[locale].filter(Boolean)];\n      }\n    }\n  } else if (isString(fallback) && locales.every((locale) => locale !== fallback)) {\n    fallbackLocales.push(fallback);\n  }\n  return fallbackLocales;\n}\nexport async function loadInitialMessages(messages, localeLoaders, options) {\n  const { defaultLocale, initialLocale, localeCodes, fallbackLocale, lazy } = options;\n  if (lazy && fallbackLocale) {\n    const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [defaultLocale, initialLocale]);\n    await Promise.all(fallbackLocales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  }\n  const locales = lazy ? [...(/* @__PURE__ */ new Set()).add(defaultLocale).add(initialLocale)] : localeCodes;\n  await Promise.all(locales.map((locale) => loadAndSetLocaleMessages(locale, localeLoaders, messages)));\n  return messages;\n}\nasync function loadMessage(locale, { key, load }) {\n  const logger = /* @__PURE__ */ createLogger(\"loadMessage\");\n  let message = null;\n  try {\n    __DEBUG__ && logger.log({ locale });\n    const getter = await load().then((r) => \"default\" in r ? r.default : r);\n    if (isFunction(getter)) {\n      message = await getter(locale);\n      __DEBUG__ && logger.log(\"dynamic load\", logger.level >= 999 ? message : \"\");\n    } else {\n      message = getter;\n      if (message != null && cacheMessages) {\n        cacheMessages.set(key, message);\n      }\n      __DEBUG__ && logger.log(\"loaded\", logger.level >= 999 ? message : \"\");\n    }\n  } catch (e) {\n    console.error(\"Failed locale loading: \" + e.message);\n  }\n  return message;\n}\nexport async function loadLocale(locale, localeLoaders, setter) {\n  const logger = /* @__PURE__ */ createLogger(\"loadLocale\");\n  const loaders = localeLoaders[locale];\n  if (loaders == null) {\n    console.warn(\"Could not find messages for locale code: \" + locale);\n    return;\n  }\n  const targetMessage = {};\n  for (const loader of loaders) {\n    let message = null;\n    if (cacheMessages && cacheMessages.has(loader.key) && loader.cache) {\n      __DEBUG__ && logger.log(loader.key + \" is already loaded\");\n      message = cacheMessages.get(loader.key);\n    } else {\n      __DEBUG__ && !loader.cache && logger.log(loader.key + \" bypassing cache!\");\n      __DEBUG__ && logger.log(loader.key + \" is loading ...\");\n      message = await loadMessage(locale, loader);\n    }\n    if (message != null) {\n      deepCopy(message, targetMessage);\n    }\n  }\n  setter(locale, targetMessage);\n}\nexport async function loadAndSetLocaleMessages(locale, localeLoaders, messages) {\n  const setter = (locale2, message) => {\n    const base = messages[locale2] || {};\n    deepCopy(message, base);\n    messages[locale2] = base;\n  };\n  await loadLocale(locale, localeLoaders, setter);\n}\n","import { isRef, unref } from \"vue\";\nfunction isI18nInstance(i18n) {\n  return i18n != null && \"global\" in i18n && \"mode\" in i18n;\n}\nfunction isComposer(target) {\n  return target != null && !(\"__composer\" in target) && \"locale\" in target && isRef(target.locale);\n}\nexport function isVueI18n(target) {\n  return target != null && \"__composer\" in target;\n}\nexport function getI18nTarget(i18n) {\n  return isI18nInstance(i18n) ? i18n.global : i18n;\n}\nexport function getComposer(i18n) {\n  const target = getI18nTarget(i18n);\n  if (isComposer(target)) return target;\n  if (isVueI18n(target)) return target.__composer;\n  return target;\n}\nfunction extractI18nProperty(i18n, key) {\n  return unref(i18n[key]);\n}\nexport function getI18nProperty(i18n, property) {\n  return extractI18nProperty(getI18nTarget(i18n), property);\n}\nexport function setLocaleProperty(i18n, locale) {\n  const target = getI18nTarget(i18n);\n  if (isRef(target.locale)) {\n    target.locale.value = locale;\n  } else {\n    target.locale = locale;\n  }\n}\nexport function getLocale(i18n) {\n  return getI18nProperty(i18n, \"locale\");\n}\nexport function getLocales(i18n) {\n  return getI18nProperty(i18n, \"locales\");\n}\nexport function getLocaleCodes(i18n) {\n  return getI18nProperty(i18n, \"localeCodes\");\n}\nexport function setLocale(i18n, locale) {\n  return getI18nTarget(i18n).setLocale(locale);\n}\nexport function setLocaleCookie(i18n, locale) {\n  return getI18nTarget(i18n).setLocaleCookie(locale);\n}\nexport function mergeLocaleMessage(i18n, locale, messages) {\n  return getI18nTarget(i18n).mergeLocaleMessage(locale, messages);\n}\nexport async function onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, context) {\n  return getI18nTarget(i18n).onBeforeLanguageSwitch(oldLocale, newLocale, initial, context);\n}\nexport function onLanguageSwitched(i18n, oldLocale, newLocale) {\n  return getI18nTarget(i18n).onLanguageSwitched(oldLocale, newLocale);\n}\n","import { assign } from \"@intlify/shared\";\nfunction split(str, index) {\n  const result = [str.slice(0, index), str.slice(index)];\n  return result;\n}\nexport function routeToObject(route) {\n  const { fullPath, query, hash, name, path, params, meta, redirectedFrom, matched } = route;\n  return {\n    fullPath,\n    params,\n    query,\n    hash,\n    name,\n    path,\n    meta,\n    matched,\n    redirectedFrom\n  };\n}\nexport function resolve({ router }, route, strategy, locale) {\n  if (strategy !== \"prefix\") {\n    return router.resolve(route);\n  }\n  const [rootSlash, restPath] = split(route.path, 1);\n  const targetPath = `${rootSlash}${locale}${restPath === \"\" ? restPath : `/${restPath}`}`;\n  const _route = router.options?.routes?.find((r) => r.path === targetPath);\n  if (_route == null) {\n    return route;\n  }\n  const _resolvableRoute = assign({}, route, _route);\n  _resolvableRoute.path = targetPath;\n  return router.resolve(_resolvableRoute);\n}\n","import { isString, assign } from \"@intlify/shared\";\nimport { hasProtocol, parsePath, parseQuery, withTrailingSlash, withoutTrailingSlash } from \"ufo\";\nimport { DEFAULT_DYNAMIC_PARAMS_KEY } from \"#build/i18n.options.mjs\";\nimport { unref } from \"#imports\";\nimport { getLocale } from \"../../compatibility.js\";\nimport { resolve, routeToObject } from \"./utils.js\";\nimport { getLocaleRouteName, getRouteName } from \"../utils.js\";\nimport { extendPrefixable, extendSwitchLocalePathIntercepter } from \"../../utils.js\";\nconst RESOLVED_PREFIXED = /* @__PURE__ */ new Set([\"prefix_and_default\", \"prefix_except_default\"]);\nfunction prefixable(options) {\n  const { currentLocale, defaultLocale, strategy } = options;\n  const isDefaultLocale = currentLocale === defaultLocale;\n  return !(isDefaultLocale && RESOLVED_PREFIXED.has(strategy)) && // no prefix for any language\n  !(strategy === \"no_prefix\");\n}\nexport const DefaultPrefixable = prefixable;\nexport function getRouteBaseName(common, givenRoute) {\n  const { routesNameSeparator } = common.runtimeConfig.public.i18n;\n  const route = unref(givenRoute);\n  if (route == null || !route.name) {\n    return;\n  }\n  const name = getRouteName(route.name);\n  return name.split(routesNameSeparator)[0];\n}\nexport function localePath(common, route, locale) {\n  if (typeof route === \"string\" && hasProtocol(route, { acceptRelative: true })) {\n    return route;\n  }\n  const localizedRoute = resolveRoute(common, route, locale);\n  return localizedRoute == null ? \"\" : localizedRoute.redirectedFrom?.fullPath || localizedRoute.fullPath;\n}\nexport function localeRoute(common, route, locale) {\n  const resolved = resolveRoute(common, route, locale);\n  return resolved ?? void 0;\n}\nexport function localeLocation(common, route, locale) {\n  const resolved = resolveRoute(common, route, locale);\n  return resolved ?? void 0;\n}\nexport function resolveRoute(common, route, locale) {\n  const { router, i18n } = common;\n  const _locale = locale || getLocale(i18n);\n  const { defaultLocale, strategy, trailingSlash } = common.runtimeConfig.public.i18n;\n  const prefixable2 = extendPrefixable(common.runtimeConfig);\n  let _route;\n  if (isString(route)) {\n    if (route[0] === \"/\") {\n      const { pathname: path, search, hash } = parsePath(route);\n      const query = parseQuery(search);\n      _route = { path, query, hash };\n    } else {\n      _route = { name: route };\n    }\n  } else {\n    _route = route;\n  }\n  let localizedRoute = assign({}, _route);\n  const isRouteLocationPathRaw = (val) => \"path\" in val && !!val.path && !(\"name\" in val);\n  if (isRouteLocationPathRaw(localizedRoute)) {\n    const resolvedRoute = resolve(common, localizedRoute, strategy, _locale);\n    const resolvedRouteName = getRouteBaseName(common, resolvedRoute);\n    if (isString(resolvedRouteName)) {\n      localizedRoute = {\n        name: getLocaleRouteName(resolvedRouteName, _locale, common.runtimeConfig.public.i18n),\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment -- FIXME\n        params: resolvedRoute.params,\n        query: resolvedRoute.query,\n        hash: resolvedRoute.hash\n      };\n      localizedRoute.state = resolvedRoute.state;\n    } else {\n      if (prefixable2({ currentLocale: _locale, defaultLocale, strategy })) {\n        localizedRoute.path = `/${_locale}${localizedRoute.path}`;\n      }\n      localizedRoute.path = trailingSlash ? withTrailingSlash(localizedRoute.path, true) : withoutTrailingSlash(localizedRoute.path, true);\n    }\n  } else {\n    if (!localizedRoute.name && !(\"path\" in localizedRoute)) {\n      localizedRoute.name = getRouteBaseName(common, router.currentRoute.value);\n    }\n    localizedRoute.name = getLocaleRouteName(localizedRoute.name, _locale, common.runtimeConfig.public.i18n);\n  }\n  try {\n    const resolvedRoute = router.resolve(localizedRoute);\n    if (resolvedRoute.name) {\n      return resolvedRoute;\n    }\n    return router.resolve(route);\n  } catch (e) {\n    if (typeof e === \"object\" && \"type\" in e && e.type === 1) {\n      return null;\n    }\n  }\n}\nfunction getLocalizableMetaFromDynamicParams(common, route) {\n  if (common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR) {\n    return unref(common.metaState.value);\n  }\n  const meta = route.meta || {};\n  return unref(meta)?.[DEFAULT_DYNAMIC_PARAMS_KEY] || {};\n}\nexport function switchLocalePath(common, locale, _route) {\n  const route = _route ?? common.router.currentRoute.value;\n  const name = getRouteBaseName(common, route);\n  if (!name) {\n    return \"\";\n  }\n  const switchLocalePathIntercepter = extendSwitchLocalePathIntercepter(common.runtimeConfig);\n  const routeCopy = routeToObject(route);\n  const resolvedParams = getLocalizableMetaFromDynamicParams(common, route)[locale];\n  const baseRoute = { ...routeCopy, name, params: { ...routeCopy.params, ...resolvedParams } };\n  const path = localePath(common, baseRoute, locale);\n  return switchLocalePathIntercepter(path, locale);\n}\n","import { joinURL } from \"ufo\";\nimport { isArray, isObject } from \"@intlify/shared\";\nimport { unref, useNuxtApp, useRuntimeConfig } from \"#imports\";\nimport { getNormalizedLocales } from \"../utils.js\";\nimport { getRouteBaseName, localeRoute, switchLocalePath } from \"./routing.js\";\nimport { getComposer, getLocale, getLocales } from \"../../compatibility.js\";\nexport function localeHead(common, { dir = true, lang = true, seo = true, key = \"hid\" }) {\n  const { defaultDirection } = useRuntimeConfig().public.i18n;\n  const i18n = getComposer(common.i18n);\n  const metaObject = {\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  };\n  const i18nBaseUrl = unref(i18n.baseUrl);\n  if (!i18nBaseUrl) {\n    console.warn(\"I18n `baseUrl` is required to generate valid SEO tag links.\");\n  }\n  if (unref(i18n.locales) == null || i18nBaseUrl == null) {\n    return metaObject;\n  }\n  const locale = getLocale(common.i18n);\n  const locales = getLocales(common.i18n);\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || {\n    code: locale\n  };\n  const currentLanguage = currentLocale.language;\n  const currentDir = currentLocale.dir || defaultDirection;\n  if (dir) {\n    metaObject.htmlAttrs.dir = currentDir;\n  }\n  if (lang && currentLanguage) {\n    metaObject.htmlAttrs.lang = currentLanguage;\n  }\n  if (seo && locale && unref(i18n.locales)) {\n    metaObject.link.push(\n      ...getHreflangLinks(common, unref(locales), key),\n      ...getCanonicalLink(common, key, seo)\n    );\n    metaObject.meta.push(\n      ...getOgUrl(common, key, seo),\n      ...getCurrentOgLocale(currentLocale, currentLanguage, key),\n      ...getAlternateOgLocales(unref(locales), currentLanguage, key)\n    );\n  }\n  return metaObject;\n}\nfunction getBaseUrl() {\n  const nuxtApp = useNuxtApp();\n  const i18n = getComposer(nuxtApp.$i18n);\n  return joinURL(unref(i18n.baseUrl), nuxtApp.$config.app.baseURL);\n}\nexport function getHreflangLinks(common, locales, key) {\n  const baseUrl = getBaseUrl();\n  const { defaultLocale, strategy } = useRuntimeConfig().public.i18n;\n  const links = [];\n  if (strategy === \"no_prefix\") return links;\n  const localeMap = /* @__PURE__ */ new Map();\n  for (const locale of locales) {\n    const localeLanguage = locale.language;\n    if (!localeLanguage) {\n      console.warn(\"Locale `language` ISO code is required to generate alternate link\");\n      continue;\n    }\n    const [language, region] = localeLanguage.split(\"-\");\n    if (language && region && (locale.isCatchallLocale || !localeMap.has(language))) {\n      localeMap.set(language, locale);\n    }\n    localeMap.set(localeLanguage, locale);\n  }\n  for (const [language, mapLocale] of localeMap.entries()) {\n    const localePath = switchLocalePath(common, mapLocale.code);\n    if (localePath) {\n      links.push({\n        [key]: `i18n-alt-${language}`,\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: language\n      });\n    }\n  }\n  if (defaultLocale) {\n    const localePath = switchLocalePath(common, defaultLocale);\n    if (localePath) {\n      links.push({\n        [key]: \"i18n-xd\",\n        rel: \"alternate\",\n        href: toAbsoluteUrl(localePath, baseUrl),\n        hreflang: \"x-default\"\n      });\n    }\n  }\n  return links;\n}\nexport function getCanonicalUrl(common, baseUrl, seo) {\n  const route = common.router.currentRoute.value;\n  const currentRoute = localeRoute(common, {\n    ...route,\n    path: void 0,\n    name: getRouteBaseName(common, route)\n  });\n  if (!currentRoute) return \"\";\n  let href = toAbsoluteUrl(currentRoute.path, baseUrl);\n  const canonicalQueries = isObject(seo) && seo.canonicalQueries || [];\n  const currentRouteQueryParams = currentRoute.query;\n  const params = new URLSearchParams();\n  for (const queryParamName of canonicalQueries) {\n    if (queryParamName in currentRouteQueryParams) {\n      const queryParamValue = currentRouteQueryParams[queryParamName];\n      if (isArray(queryParamValue)) {\n        queryParamValue.forEach((v) => params.append(queryParamName, v || \"\"));\n      } else {\n        params.append(queryParamName, queryParamValue || \"\");\n      }\n    }\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    href = `${href}?${queryString}`;\n  }\n  return href;\n}\nexport function getCanonicalLink(common, key, seo) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seo);\n  if (!href) return [];\n  return [{ [key]: \"i18n-can\", rel: \"canonical\", href }];\n}\nexport function getOgUrl(common, key, seo) {\n  const baseUrl = getBaseUrl();\n  const href = getCanonicalUrl(common, baseUrl, seo);\n  if (!href) return [];\n  return [{ [key]: \"i18n-og-url\", property: \"og:url\", content: href }];\n}\nexport function getCurrentOgLocale(currentLocale, currentLanguage, key) {\n  if (!currentLocale || !currentLanguage) return [];\n  return [{ [key]: \"i18n-og\", property: \"og:locale\", content: hypenToUnderscore(currentLanguage) }];\n}\nexport function getAlternateOgLocales(locales, currentLanguage, key) {\n  const alternateLocales = locales.filter((locale) => locale.language && locale.language !== currentLanguage);\n  return alternateLocales.map((locale) => ({\n    [key]: `i18n-og-alt-${locale.language}`,\n    property: \"og:locale:alternate\",\n    content: hypenToUnderscore(locale.language)\n  }));\n}\nfunction hypenToUnderscore(str) {\n  return (str || \"\").replace(/-/g, \"_\");\n}\nfunction toAbsoluteUrl(urlOrPath, baseUrl) {\n  if (urlOrPath.match(/^https?:\\/\\//)) return urlOrPath;\n  return joinURL(baseUrl, urlOrPath);\n}\n","import { joinURL, isEqual } from \"ufo\";\nimport { isString, isFunction, isObject } from \"@intlify/shared\";\nimport { navigateTo, useNuxtApp, useRouter, useRuntimeConfig, useState } from \"#imports\";\nimport { NUXT_I18N_MODULE_ID, isSSG, localeLoaders, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport {\n  wrapComposable,\n  detectBrowserLanguage,\n  defineGetter,\n  getLocaleDomain,\n  getDomainFromLocale,\n  runtimeDetectBrowserLanguage,\n  getHost,\n  DetectFailure\n} from \"./internal.js\";\nimport { loadLocale, makeFallbackLocaleCodes } from \"./messages.js\";\nimport { localeHead } from \"./routing/compatibles/head.js\";\nimport {\n  localePath,\n  localeRoute,\n  getRouteBaseName,\n  switchLocalePath,\n  DefaultPrefixable\n} from \"./routing/compatibles/routing.js\";\nimport {\n  getI18nProperty,\n  getI18nTarget,\n  getLocale,\n  getLocaleCodes,\n  mergeLocaleMessage,\n  onBeforeLanguageSwitch,\n  onLanguageSwitched,\n  setLocaleProperty,\n  setLocaleCookie\n} from \"./compatibility.js\";\nimport { createLogger } from \"virtual:nuxt-i18n-logger\";\nimport { createLocaleFromRouteGetter } from \"./routing/extends/router.js\";\nexport function initCommonComposableOptions(i18n) {\n  return {\n    i18n: i18n ?? useNuxtApp().$i18n,\n    router: useRouter(),\n    runtimeConfig: useRuntimeConfig(),\n    metaState: useState(\"nuxt-i18n-meta\", () => ({}))\n  };\n}\nexport async function loadAndSetLocale(newLocale, i18n, runtimeI18n, initial = false) {\n  const logger = /* @__PURE__ */ createLogger(\"loadAndSetLocale\");\n  const { differentDomains, skipSettingLocaleOnNavigate, lazy } = runtimeI18n;\n  const opts = runtimeDetectBrowserLanguage(runtimeI18n);\n  const nuxtApp = useNuxtApp();\n  const oldLocale = getLocale(i18n);\n  const localeCodes = getLocaleCodes(i18n);\n  function syncCookie(locale = oldLocale) {\n    if (opts === false || !opts.useCookie) return;\n    if (skipSettingLocaleOnNavigate) return;\n    setLocaleCookie(i18n, locale);\n  }\n  __DEBUG__ && logger.log({ newLocale, oldLocale, initial });\n  if (!newLocale) {\n    syncCookie();\n    return false;\n  }\n  if (!initial && differentDomains) {\n    syncCookie();\n    return false;\n  }\n  if (oldLocale === newLocale) {\n    syncCookie();\n    return false;\n  }\n  const localeOverride = await onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, nuxtApp);\n  if (localeOverride && localeCodes.includes(localeOverride)) {\n    if (oldLocale === localeOverride) {\n      syncCookie();\n      return false;\n    }\n    newLocale = localeOverride;\n  }\n  if (lazy) {\n    const i18nFallbackLocales = getI18nProperty(i18n, \"fallbackLocale\");\n    const setter = mergeLocaleMessage.bind(null, i18n);\n    if (i18nFallbackLocales) {\n      const fallbackLocales = makeFallbackLocaleCodes(i18nFallbackLocales, [newLocale]);\n      await Promise.all(fallbackLocales.map((locale) => loadLocale(locale, localeLoaders, setter)));\n    }\n    await loadLocale(newLocale, localeLoaders, setter);\n  }\n  if (skipSettingLocaleOnNavigate) {\n    return false;\n  }\n  syncCookie(newLocale);\n  setLocaleProperty(i18n, newLocale);\n  await onLanguageSwitched(i18n, oldLocale, newLocale);\n  return true;\n}\nexport function detectLocale(route, routeLocale, initialLocaleLoader, detectLocaleContext, runtimeI18n) {\n  const { strategy, defaultLocale, differentDomains, multiDomainLocales } = runtimeI18n;\n  const { localeCookie } = detectLocaleContext;\n  const _detectBrowserLanguage = runtimeDetectBrowserLanguage(runtimeI18n);\n  const logger = /* @__PURE__ */ createLogger(\"detectLocale\");\n  const initialLocale = isFunction(initialLocaleLoader) ? initialLocaleLoader() : initialLocaleLoader;\n  __DEBUG__ && logger.log({ initialLocale });\n  const detectedBrowser = detectBrowserLanguage(route, detectLocaleContext, initialLocale);\n  __DEBUG__ && logger.log({ detectBrowserLanguage: detectedBrowser });\n  if (detectedBrowser.reason === DetectFailure.SSG_IGNORE) {\n    return initialLocale;\n  }\n  if (detectedBrowser.locale && detectedBrowser.from != null) {\n    return detectedBrowser.locale;\n  }\n  let detected = \"\";\n  __DEBUG__ && logger.log(\"1/3\", { detected, strategy });\n  if (differentDomains || multiDomainLocales) {\n    detected ||= getLocaleDomain(normalizedLocales, strategy, route);\n  } else if (strategy !== \"no_prefix\") {\n    detected ||= routeLocale;\n  }\n  __DEBUG__ && logger.log(\"2/3\", { detected, detectBrowserLanguage: _detectBrowserLanguage });\n  const cookieLocale = _detectBrowserLanguage && _detectBrowserLanguage.useCookie && localeCookie;\n  detected ||= cookieLocale || initialLocale || defaultLocale || \"\";\n  __DEBUG__ && logger.log(\"3/3\", { detected, cookieLocale, initialLocale, defaultLocale });\n  return detected;\n}\nexport function detectRedirect({ route, locale, routeLocale, strategy }, inMiddleware = false) {\n  if (routeLocale === locale || strategy === \"no_prefix\") {\n    return \"\";\n  }\n  const common = initCommonComposableOptions();\n  const logger = /* @__PURE__ */ createLogger(\"detectRedirect\");\n  __DEBUG__ && logger.log({ route });\n  __DEBUG__ && logger.log({ locale, routeLocale, inMiddleware });\n  let redirectPath = switchLocalePath(common, locale, route.to);\n  if (inMiddleware && !redirectPath) {\n    redirectPath = localePath(common, route.to.fullPath, locale);\n  }\n  if (isEqual(redirectPath, route.to.fullPath) || route.from && isEqual(redirectPath, route.from.fullPath)) {\n    return \"\";\n  }\n  return redirectPath;\n}\nfunction isRootRedirectOptions(rootRedirect) {\n  return isObject(rootRedirect) && \"path\" in rootRedirect && \"statusCode\" in rootRedirect;\n}\nconst useRedirectState = () => useState(NUXT_I18N_MODULE_ID + \":redirect\", () => \"\");\nfunction _navigate(redirectPath, status) {\n  return navigateTo(redirectPath, { redirectCode: status });\n}\nexport async function navigate(args, { status = 302, enableNavigate = false } = {}) {\n  const { nuxtApp, i18n, locale, route } = args;\n  const { rootRedirect, differentDomains, multiDomainLocales, skipSettingLocaleOnNavigate, locales, strategy } = nuxtApp.$config.public.i18n;\n  const logger = /* @__PURE__ */ createLogger(\"navigate\");\n  let { redirectPath } = args;\n  __DEBUG__ && logger.log(\"options\", {\n    status,\n    rootRedirect,\n    differentDomains,\n    skipSettingLocaleOnNavigate,\n    enableNavigate,\n    isSSG\n  });\n  if (route.path === \"/\" && rootRedirect) {\n    if (isString(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect;\n    } else if (isRootRedirectOptions(rootRedirect)) {\n      redirectPath = \"/\" + rootRedirect.path;\n      status = rootRedirect.statusCode;\n    }\n    redirectPath = nuxtApp.$localePath(redirectPath, locale);\n    __DEBUG__ && logger.log(\"rootRedirect mode\", { redirectPath, status });\n    return _navigate(redirectPath, status);\n  }\n  if (import.meta.client && skipSettingLocaleOnNavigate) {\n    i18n.__pendingLocale = locale;\n    i18n.__pendingLocalePromise = new Promise((resolve) => {\n      i18n.__resolvePendingLocalePromise = resolve;\n    });\n    if (!enableNavigate) {\n      return;\n    }\n  }\n  if (multiDomainLocales && strategy === \"prefix_except_default\") {\n    const host = getHost();\n    const currentDomain = locales.find((locale2) => {\n      if (typeof locale2 !== \"string\") {\n        return locale2.defaultForDomains?.find((domain) => domain === host);\n      }\n      return false;\n    });\n    const defaultLocaleForDomain = typeof currentDomain !== \"string\" ? currentDomain?.code : void 0;\n    if (route.path.startsWith(`/${defaultLocaleForDomain}`)) {\n      return _navigate(route.path.replace(`/${defaultLocaleForDomain}`, \"\"), status);\n    } else if (!route.path.startsWith(`/${locale}`) && locale !== defaultLocaleForDomain) {\n      const getLocaleFromRoute = createLocaleFromRouteGetter();\n      const oldLocale = getLocaleFromRoute(route.path);\n      if (oldLocale !== \"\") {\n        return _navigate(`/${locale + route.path.replace(`/${oldLocale}`, \"\")}`, status);\n      } else {\n        return _navigate(`/${locale + (route.path === \"/\" ? \"\" : route.path)}`, status);\n      }\n    } else if (redirectPath && route.path !== redirectPath) {\n      return _navigate(redirectPath, status);\n    }\n    return;\n  }\n  if (!differentDomains) {\n    if (redirectPath) {\n      return _navigate(redirectPath, status);\n    }\n  } else {\n    const state = useRedirectState();\n    __DEBUG__ && logger.log(\"redirect\", { state: state.value, redirectPath });\n    if (state.value && state.value !== redirectPath) {\n      if (import.meta.client) {\n        state.value = \"\";\n        window.location.assign(redirectPath);\n      } else if (import.meta.server) {\n        __DEBUG__ && logger.log(\"differentDomains servermode\", { redirectPath });\n        state.value = redirectPath;\n      }\n    }\n  }\n}\nexport function injectNuxtHelpers(nuxt, i18n) {\n  defineGetter(nuxt, \"$i18n\", getI18nTarget(i18n));\n  defineGetter(nuxt, \"$getRouteBaseName\", wrapComposable(getRouteBaseName));\n  defineGetter(nuxt, \"$localePath\", wrapComposable(localePath));\n  defineGetter(nuxt, \"$localeRoute\", wrapComposable(localeRoute));\n  defineGetter(nuxt, \"$switchLocalePath\", wrapComposable(switchLocalePath));\n  defineGetter(nuxt, \"$localeHead\", wrapComposable(localeHead));\n}\nexport function extendPrefixable(runtimeConfig = useRuntimeConfig()) {\n  const logger = /* @__PURE__ */ createLogger(\"extendPrefixable\");\n  return (opts) => {\n    __DEBUG__ && logger.log(DefaultPrefixable(opts));\n    return DefaultPrefixable(opts) && !runtimeConfig.public.i18n.differentDomains;\n  };\n}\nexport function extendSwitchLocalePathIntercepter(runtimeConfig = useRuntimeConfig()) {\n  const logger = /* @__PURE__ */ createLogger(\"extendSwitchLocalePathIntercepter\");\n  return (path, locale) => {\n    if (!runtimeConfig.public.i18n.differentDomains) {\n      return path;\n    }\n    const domain = getDomainFromLocale(locale);\n    __DEBUG__ && logger.log({ domain, path });\n    return domain && joinURL(domain, path) || path;\n  };\n}\nexport function extendBaseUrl() {\n  const logger = /* @__PURE__ */ createLogger(\"extendBaseUrl\");\n  return () => {\n    const ctx = useNuxtApp();\n    const { baseUrl, defaultLocale, differentDomains } = ctx.$config.public.i18n;\n    if (isFunction(baseUrl)) {\n      const baseUrlResult = baseUrl(ctx);\n      __DEBUG__ && logger.log(\"using localeLoader function -\", { baseUrlResult });\n      return baseUrlResult;\n    }\n    const localeCode = isFunction(defaultLocale) ? defaultLocale() : defaultLocale;\n    if (differentDomains && localeCode) {\n      const domain = getDomainFromLocale(localeCode);\n      if (domain) {\n        __DEBUG__ && logger.log(\"using differentDomains -\", { domain });\n        return domain;\n      }\n    }\n    if (baseUrl) {\n      __DEBUG__ && logger.log(\"using runtimeConfig -\", { baseUrl });\n      return baseUrl;\n    }\n    return baseUrl;\n  };\n}\nexport function getNormalizedLocales(locales) {\n  const normalized = [];\n  for (const locale of locales) {\n    if (isString(locale)) {\n      normalized.push({ code: locale });\n      continue;\n    }\n    normalized.push(locale);\n  }\n  return normalized;\n}\n","import { isArray, isString, isObject } from \"@intlify/shared\";\nimport { hasProtocol } from \"ufo\";\nimport isHTTPS from \"is-https\";\nimport {\n  useRequestHeaders,\n  useRequestEvent,\n  useCookie as useNuxtCookie,\n  useRuntimeConfig,\n  useNuxtApp,\n  useRouter\n} from \"#imports\";\nimport { NUXT_I18N_MODULE_ID, DEFAULT_COOKIE_KEY, isSSG, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { findBrowserLocale, getLocalesRegex, getRouteName } from \"./routing/utils.js\";\nimport { initCommonComposableOptions } from \"./utils.js\";\nimport { createLogger } from \"virtual:nuxt-i18n-logger\";\nexport function formatMessage(message) {\n  return NUXT_I18N_MODULE_ID + \" \" + message;\n}\nexport function defineGetter(obj, key, val) {\n  Object.defineProperty(obj, key, { get: () => val });\n}\nexport function wrapComposable(fn, common = initCommonComposableOptions()) {\n  return (...args) => fn(common, ...args);\n}\nexport function parseAcceptLanguage(input) {\n  return input.split(\",\").map((tag) => tag.split(\";\")[0]);\n}\nexport function getBrowserLocale() {\n  let ret;\n  const logger = /* @__PURE__ */ createLogger(\"getBrowserLocale\");\n  if (import.meta.client) {\n    if (navigator.languages) {\n      ret = findBrowserLocale(normalizedLocales, navigator.languages);\n      __DEBUG__ && logger.log(\"(navigator.languages, ret) -\", navigator.languages, ret);\n    }\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"accept-language\"]);\n    __DEBUG__ && logger.log(\"accept-language\", header);\n    const accept = header[\"accept-language\"];\n    if (accept) {\n      ret = findBrowserLocale(normalizedLocales, parseAcceptLanguage(accept));\n      __DEBUG__ && logger.log(\"ret\", ret);\n    }\n  }\n  return ret;\n}\nexport function getI18nCookie() {\n  const detect = runtimeDetectBrowserLanguage();\n  const cookieKey = detect && detect.cookieKey || DEFAULT_COOKIE_KEY;\n  const date = /* @__PURE__ */ new Date();\n  const cookieOptions = {\n    expires: new Date(date.setDate(date.getDate() + 365)),\n    path: \"/\",\n    sameSite: detect && detect.cookieCrossOrigin ? \"none\" : \"lax\",\n    secure: detect && detect.cookieCrossOrigin || detect && detect.cookieSecure\n  };\n  if (detect && detect.cookieDomain) {\n    cookieOptions.domain = detect.cookieDomain;\n  }\n  return useNuxtCookie(cookieKey, cookieOptions);\n}\nexport function getLocaleCookie(cookieRef, detect, defaultLocale) {\n  const env = import.meta.client ? \"client\" : \"server\";\n  const logger = /* @__PURE__ */ createLogger(`getLocaleCookie:${env}`);\n  __DEBUG__ && logger.log({\n    useCookie: detect && detect.useCookie,\n    cookieKey: detect && detect.cookieKey,\n    localeCodes\n  });\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  const localeCode = cookieRef.value ?? void 0;\n  if (localeCode == null) {\n    __DEBUG__ && logger.log(`none`);\n    return;\n  }\n  if (localeCodes.includes(localeCode)) {\n    __DEBUG__ && logger.log(`locale from cookie: `, localeCode);\n    return localeCode;\n  }\n  if (defaultLocale) {\n    __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), setting to defaultLocale (${defaultLocale})`);\n    cookieRef.value = defaultLocale;\n    return defaultLocale;\n  }\n  __DEBUG__ && logger.log(`unknown locale cookie (${localeCode}), unsetting cookie`);\n  cookieRef.value = void 0;\n  return;\n}\nexport function setLocaleCookie(cookieRef, locale, detect) {\n  if (detect === false || !detect.useCookie) {\n    return;\n  }\n  cookieRef.value = locale;\n}\nexport var DetectFailure = /* @__PURE__ */ ((DetectFailure2) => {\n  DetectFailure2[\"NOT_FOUND\"] = \"not_found_match\";\n  DetectFailure2[\"FIRST_ACCESS\"] = \"first_access_only\";\n  DetectFailure2[\"NO_REDIRECT_ROOT\"] = \"not_redirect_on_root\";\n  DetectFailure2[\"NO_REDIRECT_NO_PREFIX\"] = \"not_redirect_on_no_prefix\";\n  DetectFailure2[\"SSG_IGNORE\"] = \"detect_ignore_on_ssg\";\n  return DetectFailure2;\n})(DetectFailure || {});\nvar DetectFrom = /* @__PURE__ */ ((DetectFrom2) => {\n  DetectFrom2[\"COOKIE\"] = \"cookie\";\n  DetectFrom2[\"NAVIGATOR_HEADER\"] = \"navigator_or_header\";\n  DetectFrom2[\"FALLBACK\"] = \"fallback\";\n  return DetectFrom2;\n})(DetectFrom || {});\nexport const DefaultDetectBrowserLanguageFromResult = { locale: \"\" };\nexport function detectBrowserLanguage(route, detectLocaleContext, locale = \"\") {\n  const logger = /* @__PURE__ */ createLogger(\"detectBrowserLanguage\");\n  const _detect = runtimeDetectBrowserLanguage();\n  if (!_detect) {\n    return DefaultDetectBrowserLanguageFromResult;\n  }\n  const { strategy } = useRuntimeConfig().public.i18n;\n  const { ssg, callType, firstAccess, localeCookie } = detectLocaleContext;\n  __DEBUG__ && logger.log({ ssg, callType, firstAccess });\n  if (isSSG && strategy === \"no_prefix\" && (import.meta.server || ssg === \"ssg_ignore\")) {\n    return { locale: \"\", reason: \"detect_ignore_on_ssg\" /* SSG_IGNORE */ };\n  }\n  if (!firstAccess) {\n    return { locale: strategy === \"no_prefix\" ? locale : \"\", reason: \"first_access_only\" /* FIRST_ACCESS */ };\n  }\n  const { redirectOn, alwaysRedirect, useCookie, fallbackLocale } = _detect;\n  const path = isString(route) ? route : route.path;\n  __DEBUG__ && logger.log({ locale, path, strategy, alwaysRedirect, redirectOn });\n  if (strategy !== \"no_prefix\") {\n    if (redirectOn === \"root\" && path !== \"/\") {\n      __DEBUG__ && logger.log(\"not root\", { path });\n      return { locale: \"\", reason: \"not_redirect_on_root\" /* NO_REDIRECT_ROOT */ };\n    }\n    __DEBUG__ && redirectOn === \"no prefix\" && logger.log(\"no prefix -\", { path });\n    if (redirectOn === \"no prefix\" && !alwaysRedirect && path.match(getLocalesRegex(localeCodes))) {\n      return { locale: \"\", reason: \"not_redirect_on_no_prefix\" /* NO_REDIRECT_NO_PREFIX */ };\n    }\n  }\n  let from;\n  const cookieMatch = useCookie && localeCookie || void 0;\n  if (useCookie) {\n    from = \"cookie\" /* COOKIE */;\n  }\n  const browserMatch = getBrowserLocale();\n  if (!cookieMatch) {\n    from = \"navigator_or_header\" /* NAVIGATOR_HEADER */;\n  }\n  const matchedLocale = cookieMatch || browserMatch;\n  const resolved = matchedLocale || fallbackLocale || \"\";\n  if (!matchedLocale && fallbackLocale) {\n    from = \"fallback\" /* FALLBACK */;\n  }\n  __DEBUG__ && logger.log({ locale: resolved, cookieMatch, browserMatch, from });\n  return { locale: resolved, from };\n}\nexport function getHost() {\n  let host;\n  if (import.meta.client) {\n    host = window.location.host;\n  } else if (import.meta.server) {\n    const header = useRequestHeaders([\"x-forwarded-host\", \"host\"]);\n    let detectedHost;\n    if (\"x-forwarded-host\" in header) {\n      detectedHost = header[\"x-forwarded-host\"];\n    } else if (\"host\" in header) {\n      detectedHost = header[\"host\"];\n    }\n    host = isArray(detectedHost) ? detectedHost[0] : detectedHost;\n  }\n  return host;\n}\nexport function getLocaleDomain(locales, strategy, route) {\n  const logger = /* @__PURE__ */ createLogger(`getLocaleDomain`);\n  let host = getHost() || \"\";\n  const routePath = isObject(route) ? route.path : isString(route) ? route : \"\";\n  if (host) {\n    __DEBUG__ && logger.log(`locating domain for host`, { host, strategy, path: routePath });\n    let matchingLocale;\n    const matchingLocales = locales.filter((locale) => {\n      if (locale && locale.domain) {\n        let domain = locale.domain;\n        if (hasProtocol(locale.domain)) {\n          domain = locale.domain.replace(/(http|https):\\/\\//, \"\");\n        }\n        return domain === host;\n      } else if (Array.isArray(locale?.domains)) {\n        return locale.domains.includes(host);\n      }\n      return false;\n    });\n    if (matchingLocales.length === 1) {\n      matchingLocale = matchingLocales[0];\n      __DEBUG__ && logger.log(`found one matching domain`, { host, matchedLocale: matchingLocales[0].code });\n    } else if (matchingLocales.length > 1) {\n      if (strategy === \"no_prefix\") {\n        console.warn(\n          formatMessage(\n            \"Multiple matching domains found! This is not supported for no_prefix strategy in combination with differentDomains!\"\n          )\n        );\n        matchingLocale = matchingLocales[0];\n      } else {\n        if (route) {\n          __DEBUG__ && logger.log(`check matched domain for locale match`, { path: routePath, host });\n          if (routePath && routePath !== \"\") {\n            const matches = routePath.match(getLocalesRegex(matchingLocales.map((l) => l.code)));\n            if (matches && matches.length > 1) {\n              matchingLocale = matchingLocales.find((l) => l.code === matches[1]);\n              __DEBUG__ && logger.log(`matched locale from path`, { matchedLocale: matchingLocale?.code });\n            }\n          }\n        }\n        if (!matchingLocale) {\n          matchingLocale = matchingLocales.find(\n            (l) => Array.isArray(l.defaultForDomains) ? l.defaultForDomains.includes(host) : l.domainDefault\n          );\n          __DEBUG__ && logger.log(`no locale matched - using default for this domain`, { matchedLocale: matchingLocale?.code });\n        }\n      }\n    }\n    if (matchingLocale) {\n      return matchingLocale.code;\n    } else {\n      host = \"\";\n    }\n  }\n  return host;\n}\nexport function getDomainFromLocale(localeCode) {\n  const runtimeConfig = useRuntimeConfig();\n  const nuxtApp = useNuxtApp();\n  const host = getHost();\n  const config = runtimeConfig.public.i18n;\n  const lang = normalizedLocales.find((locale) => locale.code === localeCode);\n  const domain = config?.domainLocales?.[localeCode]?.domain || lang?.domain || lang?.domains?.find((v) => v === host);\n  if (domain) {\n    if (hasProtocol(domain, { strict: true })) {\n      return domain;\n    }\n    let protocol;\n    if (import.meta.server) {\n      const {\n        node: { req }\n      } = useRequestEvent(nuxtApp);\n      protocol = req && isHTTPS(req) ? \"https:\" : \"http:\";\n    } else {\n      protocol = new URL(window.location.origin).protocol;\n    }\n    return protocol + \"//\" + domain;\n  }\n  console.warn(formatMessage(\"Could not find domain name for locale \" + localeCode));\n}\nexport const runtimeDetectBrowserLanguage = (opts = useRuntimeConfig().public.i18n) => {\n  if (opts?.detectBrowserLanguage === false) return false;\n  return opts?.detectBrowserLanguage;\n};\nexport function setupMultiDomainLocales(nuxtContext, defaultLocaleDomain) {\n  const { multiDomainLocales, strategy, routesNameSeparator, defaultLocaleRouteNameSuffix } = nuxtContext.$config.public.i18n;\n  if (!multiDomainLocales) return;\n  if (!(strategy === \"prefix_except_default\" || strategy === \"prefix_and_default\")) return;\n  const router = useRouter();\n  const defaultRouteSuffix = [routesNameSeparator, defaultLocaleRouteNameSuffix].join(\"\");\n  for (const route of router.getRoutes()) {\n    const routeName = getRouteName(route.name);\n    if (routeName.endsWith(defaultRouteSuffix)) {\n      router.removeRoute(routeName);\n      continue;\n    }\n    const routeNameLocale = routeName.split(routesNameSeparator)[1];\n    if (routeNameLocale === defaultLocaleDomain) {\n      router.addRoute({\n        ...route,\n        path: route.path === `/${routeNameLocale}` ? \"/\" : route.path.replace(`/${routeNameLocale}`, \"\")\n      });\n    }\n  }\n}\nexport function getDefaultLocaleForDomain(nuxtContext) {\n  const { locales, defaultLocale, multiDomainLocales } = nuxtContext.$config.public.i18n;\n  let defaultLocaleDomain = defaultLocale || \"\";\n  if (!multiDomainLocales) {\n    return defaultLocaleDomain;\n  }\n  const host = getHost();\n  const hasDefaultForDomains = locales.some(\n    (l) => typeof l !== \"string\" && Array.isArray(l.defaultForDomains)\n  );\n  if (hasDefaultForDomains) {\n    const findDefaultLocale = locales.find(\n      (l) => typeof l === \"string\" || !Array.isArray(l.defaultForDomains) ? false : l.defaultForDomains.includes(host ?? \"\")\n    );\n    defaultLocaleDomain = findDefaultLocale?.code ?? \"\";\n  }\n  return defaultLocaleDomain;\n}\n","import { useRequestHeaders, useCookie as useNuxtCookie } from \"#imports\";\nimport { ref, computed, watch, onUnmounted, unref } from \"vue\";\nimport { parseAcceptLanguage, wrapComposable, runtimeDetectBrowserLanguage } from \"../internal.js\";\nimport { DEFAULT_DYNAMIC_PARAMS_KEY, localeCodes, normalizedLocales } from \"#build/i18n.options.mjs\";\nimport { getActiveHead } from \"unhead\";\nimport { getNormalizedLocales, initCommonComposableOptions } from \"../utils.js\";\nimport {\n  getAlternateOgLocales,\n  getCanonicalLink,\n  getCurrentOgLocale,\n  getHreflangLinks,\n  getOgUrl,\n  localeHead\n} from \"../routing/compatibles/head.js\";\nimport {\n  getRouteBaseName,\n  localeLocation,\n  localePath,\n  localeRoute,\n  switchLocalePath\n} from \"../routing/compatibles/routing.js\";\nimport { findBrowserLocale } from \"../routing/utils.js\";\nimport { getLocale, getLocales, getComposer } from \"../compatibility.js\";\nexport * from \"vue-i18n\";\nexport * from \"./shared.js\";\nexport function useSetI18nParams(seo) {\n  const common = initCommonComposableOptions();\n  const head = getActiveHead();\n  const i18n = getComposer(common.i18n);\n  const router = common.router;\n  const locale = getLocale(common.i18n);\n  const locales = getNormalizedLocales(getLocales(common.i18n));\n  const _i18nParams = ref({});\n  const experimentalSSR = common.runtimeConfig.public.i18n.experimental.switchLocalePathLinkSSR;\n  const i18nParams = computed({\n    get() {\n      return experimentalSSR ? common.metaState.value : router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] ?? {};\n    },\n    set(val) {\n      common.metaState.value = val;\n      _i18nParams.value = val;\n      router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] = val;\n    }\n  });\n  const stop = watch(\n    () => router.currentRoute.value.fullPath,\n    () => {\n      router.currentRoute.value.meta[DEFAULT_DYNAMIC_PARAMS_KEY] = experimentalSSR ? common.metaState.value : _i18nParams.value;\n    }\n  );\n  onUnmounted(() => {\n    stop();\n  });\n  const currentLocale = getNormalizedLocales(locales).find((l) => l.code === locale) || { code: locale };\n  const currentLocaleLanguage = currentLocale.language;\n  if (!unref(i18n.baseUrl)) {\n    console.warn(\"I18n `baseUrl` is required to generate valid SEO tag links.\");\n  }\n  const setMeta = () => {\n    const metaObject = {\n      link: [],\n      meta: []\n    };\n    if (locale && i18n.locales) {\n      const key = \"id\";\n      metaObject.link.push(\n        ...getHreflangLinks(common, locales, key),\n        ...getCanonicalLink(common, key, seo)\n      );\n      metaObject.meta.push(\n        ...getOgUrl(common, key, seo),\n        ...getCurrentOgLocale(currentLocale, currentLocaleLanguage, key),\n        ...getAlternateOgLocales(locales, currentLocaleLanguage, key)\n      );\n    }\n    head?.push(metaObject);\n  };\n  return function(params) {\n    i18nParams.value = { ...params };\n    setMeta();\n  };\n}\nexport function useLocaleHead({\n  dir = true,\n  lang = true,\n  seo = true,\n  key = \"hid\"\n} = {}) {\n  const common = initCommonComposableOptions();\n  const metaObject = ref({\n    htmlAttrs: {},\n    link: [],\n    meta: []\n  });\n  function cleanMeta() {\n    metaObject.value = {\n      htmlAttrs: {},\n      link: [],\n      meta: []\n    };\n  }\n  function updateMeta() {\n    metaObject.value = localeHead(common, { dir, lang, seo, key });\n  }\n  if (import.meta.client) {\n    const i18n = getComposer(common.i18n);\n    const stop = watch(\n      [() => common.router.currentRoute.value, i18n.locale],\n      () => {\n        cleanMeta();\n        updateMeta();\n      },\n      { immediate: true }\n    );\n    onUnmounted(() => stop());\n  } else {\n    updateMeta();\n  }\n  return metaObject;\n}\nexport function useRouteBaseName() {\n  return wrapComposable(getRouteBaseName);\n}\nexport function useLocalePath() {\n  return wrapComposable(localePath);\n}\nexport function useLocaleRoute() {\n  return wrapComposable(localeRoute);\n}\nexport function useLocaleLocation() {\n  return wrapComposable(localeLocation);\n}\nexport function useSwitchLocalePath() {\n  return wrapComposable(switchLocalePath);\n}\nexport function useBrowserLocale() {\n  const headers = useRequestHeaders([\"accept-language\"]);\n  return findBrowserLocale(\n    normalizedLocales,\n    import.meta.client ? navigator.languages : parseAcceptLanguage(headers[\"accept-language\"] || \"\")\n  ) || null;\n}\nexport function useCookieLocale() {\n  const locale = ref(\"\");\n  const detect = runtimeDetectBrowserLanguage();\n  if (detect && detect.useCookie) {\n    const cookieKey = detect.cookieKey;\n    let code = null;\n    if (import.meta.client) {\n      code = useNuxtCookie(cookieKey).value;\n    } else if (import.meta.server) {\n      const cookie = useRequestHeaders([\"cookie\"]);\n      code = cookie[cookieKey];\n    }\n    if (code && localeCodes.includes(code)) {\n      locale.value = code;\n    }\n  }\n  return locale;\n}\nconst warnRuntimeUsage = (method) => console.warn(\n  method + \"() is a compiler-hint helper that is only usable inside the script block of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.\"\n);\nexport function defineI18nRoute(route) {\n  if (import.meta.dev) {\n    warnRuntimeUsage(\"defineI18nRoute\");\n  }\n}\n"],"names":["useStateKeyPrefix","useState","args","autoKey","_key","init","key","nuxtApp","useNuxtApp","state","toRef","initialValue","isRef","cacheMessages","loadVueI18nOptions","vueI18nConfigs","nuxt","vueI18nOptions","configFile","resolver","resolved","isFunction","deepCopy","makeFallbackLocaleCodes","fallback","locales","fallbackLocales","isArray","isObject","targets","locale","isString","loadInitialMessages","messages","localeLoaders","options","defaultLocale","initialLocale","localeCodes","fallbackLocale","lazy","loadAndSetLocaleMessages","loadMessage","load","message","getter","e","loadLocale","setter","loaders","targetMessage","loader","locale2","base","isI18nInstance","i18n","isComposer","target","isVueI18n","getI18nTarget","getComposer","extractI18nProperty","unref","getI18nProperty","property","setLocaleProperty","getLocale","getLocales","getLocaleCodes","setLocaleCookie","mergeLocaleMessage","onBeforeLanguageSwitch","oldLocale","newLocale","initial","context","onLanguageSwitched","split","str","index","routeToObject","route","fullPath","query","hash","name","path","params","meta","redirectedFrom","matched","resolve","router","strategy","rootSlash","restPath","targetPath","_route","_b","_a","r","_resolvableRoute","assign","RESOLVED_PREFIXED","prefixable","currentLocale","DefaultPrefixable","getRouteBaseName","common","givenRoute","routesNameSeparator","getRouteName","localePath","hasProtocol","localizedRoute","resolveRoute","localeRoute","localeLocation","_locale","trailingSlash","prefixable2","extendPrefixable","search","parsePath","parseQuery","val","resolvedRoute","resolvedRouteName","getLocaleRouteName","withTrailingSlash","withoutTrailingSlash","getLocalizableMetaFromDynamicParams","DEFAULT_DYNAMIC_PARAMS_KEY","switchLocalePath","switchLocalePathIntercepter","extendSwitchLocalePathIntercepter","routeCopy","resolvedParams","baseRoute","localeHead","dir","lang","seo","defaultDirection","useRuntimeConfig","metaObject","i18nBaseUrl","getNormalizedLocales","l","currentLanguage","currentDir","getHreflangLinks","getCanonicalLink","getOgUrl","getCurrentOgLocale","getAlternateOgLocales","getBaseUrl","joinURL","baseUrl","links","localeMap","localeLanguage","language","region","mapLocale","toAbsoluteUrl","getCanonicalUrl","currentRoute","href","canonicalQueries","currentRouteQueryParams","queryParamName","queryParamValue","v","queryString","hypenToUnderscore","urlOrPath","initCommonComposableOptions","useRouter","loadAndSetLocale","runtimeI18n","differentDomains","skipSettingLocaleOnNavigate","opts","runtimeDetectBrowserLanguage","syncCookie","localeOverride","i18nFallbackLocales","detectLocale","routeLocale","initialLocaleLoader","detectLocaleContext","multiDomainLocales","localeCookie","_detectBrowserLanguage","detectedBrowser","detectBrowserLanguage","DetectFailure","detected","getLocaleDomain","normalizedLocales","cookieLocale","detectRedirect","inMiddleware","redirectPath","isEqual","isRootRedirectOptions","rootRedirect","useRedirectState","NUXT_I18N_MODULE_ID","_navigate","status","navigateTo","navigate","enableNavigate","host","getHost","currentDomain","domain","defaultLocaleForDomain","createLocaleFromRouteGetter","injectNuxtHelpers","defineGetter","wrapComposable","runtimeConfig","getDomainFromLocale","extendBaseUrl","ctx","localeCode","formatMessage","obj","fn","getBrowserLocale","ret","findBrowserLocale","getI18nCookie","detect","cookieKey","DEFAULT_COOKIE_KEY","date","cookieOptions","useNuxtCookie","getLocaleCookie","cookieRef","DetectFailure2","DefaultDetectBrowserLanguageFromResult","_detect","ssg","callType","firstAccess","redirectOn","alwaysRedirect","useCookie","getLocalesRegex","from","cookieMatch","browserMatch","matchedLocale","routePath","matchingLocale","matchingLocales","matches","config","_c","protocol","setupMultiDomainLocales","nuxtContext","defaultLocaleDomain","defaultLocaleRouteNameSuffix","defaultRouteSuffix","routeName","routeNameLocale","getDefaultLocaleForDomain","findDefaultLocale","useLocalePath","useSwitchLocalePath"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}