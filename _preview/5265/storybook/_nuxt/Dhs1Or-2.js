import{d as g,c as n,R as k,w as V,D as B,E as I,N as D,a3 as W,j as T,l as q}from"./DwwldUEF.js";import{s as $}from"./CUvT7aun.js";import{w as C}from"./TLA9Fm80.js";import{_ as E}from"./DqyB4W5h.js";import{_ as S}from"./DhTbjJlp.js";(function(){try{var s=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},e=new s.Error().stack;e&&(s._sentryDebugIds=s._sentryDebugIds||{},s._sentryDebugIds[e]="d84f478f-9f49-4a84-aab3-97b685bc5398",s._sentryDebugIdIdentifier="sentry-dbid-d84f478f-9f49-4a84-aab3-97b685bc5398")}catch{}})();const u=g({__name:"VButton",props:{as:{default:"button"},variant:{},pressed:{type:Boolean,default:void 0},size:{},disabled:{type:Boolean,default:!1},focusableWhenDisabled:{type:Boolean,default:!1},type:{default:"button"},connections:{default:()=>[]},hasIconStart:{type:Boolean,default:!1},hasIconEnd:{type:Boolean,default:!1},iconOnly:{type:Boolean,default:!1}},emits:["click","mousedown","keydown","focus","blur"],setup(s){const e=s,l=n(()=>e.as==="VLink"?E:e.as),i=k(),d=n(()=>["VLink","a"].includes(e.as)?void 0:e.type),f=n(()=>e.connections.map(t=>`connection-${t}`).join(" ")),p=n(()=>e.pressed||i["aria-pressed"]||i["aria-expanded"]),c=n(()=>p.value&&["bordered-white","bordered-tx","transparent-dark"].includes(e.variant)?`${e.variant}-pressed`:e.variant),r=n(()=>e.variant==="plain--avoid"),b=n(()=>e.variant.startsWith("filled-")),m=n(()=>e.variant.startsWith("bordered-")||e.variant.startsWith("transparent-")||e.variant==="plain"),h=n(()=>e.as!=="VLink"),y=n(()=>e.disabled&&e.focusableWhenDisabled||void 0),v=n(()=>e.disabled&&!e.focusableWhenDisabled&&h.value||void 0),w=n(()=>e.as==="VLink"?{href:i.href}:{});return V(()=>e.as,t=>{["a","NuxtLink"].includes(t)&&i.href!==`#${$}`&&C(`Please use \`VLink\` with an \`href\` prop instead of ${t} for the button component`)},{immediate:!0}),(t,a)=>(T(),B(W(l.value),D({type:d.value,class:["group/button button flex appearance-none items-center justify-center rounded-sm no-underline",[c.value,f.value,t.size,{"icon-only":t.iconOnly,"icon-start":t.hasIconStart,"icon-end":t.hasIconEnd,border:!r.value,"focus-visible:outline-tx":r.value,"focus-slim-filled":b.value,"focus-visible:focus-slim-tx":m.value}]],"aria-pressed":t.pressed,"aria-disabled":y.value,disabled:v.value},w.value,{onClick:a[0]||(a[0]=o=>t.$emit("click",o)),onMousedown:a[1]||(a[1]=o=>t.$emit("mousedown",o)),onKeydown:a[2]||(a[2]=o=>t.$emit("keydown",o)),onFocus:a[3]||(a[3]=o=>t.$emit("focus",o)),onBlur:a[4]||(a[4]=o=>t.$emit("blur",o))}),{default:I(()=>[q(t.$slots,"default",{},void 0,!0)]),_:3},16,["type","class","aria-pressed","aria-disabled","disabled"]))}}),x=S(u,[["__scopeId","data-v-81a0971d"]]);u.__docgenInfo={exportName:"default",displayName:"VButton",description:"",tags:{},props:[{name:"as",description:"Passed to `component :is` to allow the button to *appear* as a button but\nwork like another element (like an `anchor`). May only be either `button` or `VLink`.\n`anchor` is only supported for the `VSkipToContentButton` component that uses\na hash URL (`skipToContentTargetId`).\n\nWe do not support other elements because their use cases are marginal, and they\nadd complexity that we can avoid otherwise.\n\nWe also don't allow any old Vue component because Vue does not have ref-forwarding,\nso we wouldn't be able to detect the type of the DOM node that is ultimately rendered\nby any Vue component passed.",tags:{default:[{description:"'button'",title:"default"}]},required:!1,type:{name:"ButtonForm"},defaultValue:{func:!1,value:'"button"'}},{name:"variant",description:`The variant of the button.

Plain removes all styles except the focus ring. The button
should set a border color, otherwise the browser default is used.
Plain--avoid removes _all_ styles including the focus ring.`,required:!0,type:{name:"ButtonVariant"}},{name:"pressed",description:`Allows for programmatically setting the pressed state of a button,
i.e., in the case of a button opening a menu.`,required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"undefined"}},{name:"size",description:"The size of the button. `disabled` removes all internal padding allowing\nthe consumer of the component to determine the padding.",tags:{default:[{description:"'medium'",title:"default"}]},required:!0,type:{name:"ButtonSize"}},{name:"disabled",description:'Whether the button is disabled. Used alone this will only\nvisually effect the button but will not "truly" disable the\nbutton unless the `focusable` prop is also set to `false`.',tags:{default:[{description:"false",title:"default"}]},required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"focusableWhenDisabled",description:`Whether the button is focusable when disabled. Should be \`false\`
in almost all cases except when a button needs to be focusable
while still being disabled (in the case of a form submit button
that is disabled due to an incomplete form for example).`,tags:{default:[{description:"false",title:"default"}]},required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"type",description:'The HTML `type` attribute for the button. Ignored if `as` is\npassed as anything other than `"button"`.',tags:{default:[{description:"'button'",title:"default"}]},required:!1,type:{name:"ButtonType"},defaultValue:{func:!1,value:'"button"'}},{name:"connections",description:`Whether the button is connected to another control and needs to have no rounded
borders at that edge.`,tags:{default:[{description:"[]",title:"default"}]},required:!1,type:{name:"Array",elements:[{name:"ButtonConnections"}]},defaultValue:{func:!1,value:"() => []"}},{name:"hasIconStart",description:"Whether the button has an icon at the inline start of the button.",tags:{default:[{description:"false",title:"default"}]},required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"hasIconEnd",description:"Whether the button has an icon at the inline end of the button.",tags:{default:[{description:"false",title:"default"}]},required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}},{name:"iconOnly",description:"If the button is only an icon, width is set to height, and padding is removed.",required:!1,type:{name:"boolean"},defaultValue:{func:!1,value:"false"}}],events:[{name:"click",type:{names:["MouseEvent"]}},{name:"mousedown",type:{names:["MouseEvent"]}},{name:"keydown",type:{names:["KeyboardEvent"]}},{name:"focus",type:{names:["FocusEvent"]}},{name:"blur",type:{names:["FocusEvent"]}}],slots:[{name:"default",description:"The content of the button"}],sourceFiles:["/home/runner/work/openverse/openverse/frontend/src/components/VButton.vue"]};export{x as V};
