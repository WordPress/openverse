{"version":3,"file":"W77m2Y03.js","sources":["../../src/composables/use-search-type.ts"],"sourcesContent":["import { useNuxtApp } from \"#imports\"\nimport { computed, ref } from \"vue\"\n\nimport {\n  ALL_MEDIA,\n  AUDIO,\n  IMAGE,\n  MODEL_3D,\n  VIDEO,\n  additionalSearchTypes,\n  supportedSearchTypes,\n  type SearchType,\n} from \"#shared/constants/media\"\nimport { useSearchStore } from \"~/stores/search\"\nimport { useFeatureFlagStore } from \"~/stores/feature-flag\"\n\nconst icons = {\n  [ALL_MEDIA]: \"all\",\n  [AUDIO]: \"audio\",\n  [IMAGE]: \"image\",\n  [VIDEO]: \"video\",\n  [MODEL_3D]: \"model-3d\",\n} as const\n\nconst labels = {\n  [ALL_MEDIA]: \"searchType.all\",\n  [IMAGE]: \"searchType.image\",\n  [AUDIO]: \"searchType.audio\",\n  [VIDEO]: \"searchType.video\",\n  [MODEL_3D]: \"searchType.model3d\",\n} as const\n\nexport const searchTypeLabels = labels\n\nexport default function useSearchType({\n  component = \"Unknown\",\n}: { component?: string } = {}) {\n  const {\n    $i18n: { t },\n    $sendCustomEvent,\n  } = useNuxtApp()\n\n  const activeType = computed<SearchType>(() => {\n    return useSearchStore().searchType\n  })\n\n  const previousSearchType = ref(activeType.value)\n\n  const featureFlagStore = useFeatureFlagStore()\n\n  const additionalTypes = computed(() =>\n    featureFlagStore.isOn(\"additional_search_types\")\n      ? additionalSearchTypes\n      : []\n  )\n  const searchTypes = [...supportedSearchTypes]\n\n  const setActiveType = (searchType: SearchType) => {\n    if (previousSearchType.value === searchType) {\n      return\n    }\n\n    $sendCustomEvent(\"CHANGE_CONTENT_TYPE\", {\n      previous: previousSearchType.value,\n      next: searchType,\n      component,\n    })\n\n    // `setActiveType` is called after the search middleware\n    // ran and updated the search store state\n    // TODO: Figure out why\n    if (activeType.value === searchType) {\n      return\n    }\n    useSearchStore().setSearchType(searchType)\n    previousSearchType.value = searchType\n  }\n\n  const getSearchTypeProps = (searchType?: SearchType) => {\n    const type = searchType ?? activeType.value\n    return {\n      label: t(labels[type]),\n      searchType: type,\n    }\n  }\n\n  return {\n    setActiveType,\n    activeType,\n    getSearchTypeProps,\n    types: searchTypes,\n    icons,\n    labels,\n    additionalTypes,\n  }\n}\n"],"names":["icons","ALL_MEDIA","AUDIO","IMAGE","VIDEO","MODEL_3D","labels","useSearchType","component","$sendCustomEvent","useNuxtApp","activeType","computed","useSearchStore","previousSearchType","ref","featureFlagStore","useFeatureFlagStore","additionalTypes","additionalSearchTypes","searchTypes","supportedSearchTypes","searchType","type"],"mappings":"qiBAgBA,MAAMA,EAAQ,CACZ,CAACC,CAAS,EAAG,MACb,CAACC,CAAK,EAAG,QACT,CAACC,CAAK,EAAG,QACT,CAACC,CAAK,EAAG,QACT,CAACC,CAAQ,EAAG,UACd,EAEMC,EAAS,CACb,CAACL,CAAS,EAAG,iBACb,CAACE,CAAK,EAAG,mBACT,CAACD,CAAK,EAAG,mBACT,CAACE,CAAK,EAAG,mBACT,CAACC,CAAQ,EAAG,oBACd,EAIA,SAAwBE,EAAc,CACpC,UAAAC,EAAY,SACd,EAA4B,GAAI,CACxB,KAAA,CACJ,MAAO,CAAE,CAAE,EACX,iBAAAC,GACEC,EAAW,EAETC,EAAaC,EAAqB,IAC/BC,EAAiB,EAAA,UACzB,EAEKC,EAAqBC,EAAIJ,EAAW,KAAK,EAEzCK,EAAmBC,EAAoB,EAEvCC,EAAkBN,EAAS,IAC/BI,EAAiB,KAAK,yBAAyB,EAC3CG,EACA,CAAA,CACN,EACMC,EAAc,CAAC,GAAGC,CAAoB,EA+BrC,MAAA,CACL,cA9BqBC,GAA2B,CAC5CR,EAAmB,QAAUQ,IAIjCb,EAAiB,sBAAuB,CACtC,SAAUK,EAAmB,MAC7B,KAAMQ,EACN,UAAAd,CAAA,CACD,EAKGG,EAAW,QAAUW,IAGVT,EAAA,EAAE,cAAcS,CAAU,EACzCR,EAAmB,MAAQQ,GAC7B,EAYE,WAAAX,EACA,mBAX0BW,GAA4B,CAChD,MAAAC,EAAOD,GAAcX,EAAW,MAC/B,MAAA,CACL,MAAO,EAAEL,EAAOiB,CAAI,CAAC,EACrB,WAAYA,CACd,CACF,EAME,MAAOH,EACP,MAAApB,EACA,OAAAM,EACA,gBAAAY,CACF,CACF"}