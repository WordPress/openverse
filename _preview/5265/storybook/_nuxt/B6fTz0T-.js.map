{"version":3,"file":"B6fTz0T-.js","sources":["../../src/composables/use-dark-mode.ts"],"sourcesContent":["import { computed } from \"#imports\"\n\nimport { usePreferredColorScheme } from \"@vueuse/core\"\n\nimport { useFeatureFlagStore } from \"~/stores/feature-flag\"\nimport { useUiStore } from \"~/stores/ui\"\n\nexport const DARK_MODE_CLASS = \"dark-mode\"\nexport const LIGHT_MODE_CLASS = \"light-mode\"\n\n/**\n * Determines the dark mode setting based on user preference or feature flag.\n *\n * When dark mode toggling is disabled, the site is in \"light mode\".\n *\n * When the \"dark_mode_ui_toggle\" flag is enabled, the site will respect\n * the user system preference by default.\n *\n */\nexport function useDarkMode() {\n  const uiStore = useUiStore()\n  const featureFlagStore = useFeatureFlagStore()\n\n  const darkModeToggleable = computed(() =>\n    featureFlagStore.isOn(\"dark_mode_ui_toggle\")\n  )\n\n  /**\n   * the color mode setting for the app;\n   *\n   * This can be one of \"dark\", \"light\" or \"system\". If the toggle\n   * feature is disabled, we default to \"light\".\n   */\n  const colorMode = computed(() => {\n    if (darkModeToggleable.value) {\n      return uiStore.colorMode\n    }\n    return \"light\"\n  })\n\n  /**\n   * the color mode setting for the OS;\n   *\n   * This can be one of \"dark\" or \"light\". If the OS does not specify\n   * a preference, we default to \"light\".\n   */\n  const osColorMode = computed(() => {\n    const pref = usePreferredColorScheme()\n    return pref.value === \"no-preference\" ? \"light\" : pref.value\n  })\n\n  /**\n   * the effective color mode of the app;\n   *\n   * This can be one of \"dark\" or \"light\". This is a combination of the\n   * toggle feature flag, the user's preference at the app and OS levels\n   * and the default value of \"light\".\n   */\n  const effectiveColorMode = computed(() => {\n    if (!darkModeToggleable.value) {\n      return \"light\"\n    }\n    if (colorMode.value === \"system\") {\n      return osColorMode.value\n    }\n    return colorMode.value\n  })\n\n  /**\n   * The server does not have access to media queries, so the `system` color mode defaults to \"light\".\n   */\n  const serverColorMode = computed(() => {\n    return !darkModeToggleable.value || colorMode.value === \"system\"\n      ? \"light\"\n      : colorMode.value\n  })\n\n  const cssClass = computed(() => {\n    return {\n      light: LIGHT_MODE_CLASS,\n      dark: DARK_MODE_CLASS,\n      system: \"\",\n    }[colorMode.value]\n  })\n\n  return {\n    colorMode,\n    osColorMode,\n    effectiveColorMode,\n    serverColorMode,\n    cssClass,\n  }\n}\n"],"names":["DARK_MODE_CLASS","LIGHT_MODE_CLASS","useDarkMode","uiStore","useUiStore","featureFlagStore","useFeatureFlagStore","darkModeToggleable","computed","colorMode","osColorMode","pref","usePreferredColorScheme","effectiveColorMode","serverColorMode","cssClass"],"mappings":"udAOO,MAAMA,EAAkB,YAClBC,EAAmB,aAWzB,SAASC,GAAc,CAC5B,MAAMC,EAAUC,EAAW,EACrBC,EAAmBC,EAAoB,EAEvCC,EAAqBC,EAAS,IAClCH,EAAiB,KAAK,qBAAqB,CAC7C,EAQMI,EAAYD,EAAS,IACrBD,EAAmB,MACdJ,EAAQ,UAEV,OACR,EAQKO,EAAcF,EAAS,IAAM,CACjC,MAAMG,EAAOC,EAAwB,EACrC,OAAOD,EAAK,QAAU,gBAAkB,QAAUA,EAAK,KAAA,CACxD,EASKE,EAAqBL,EAAS,IAC7BD,EAAmB,MAGpBE,EAAU,QAAU,SACfC,EAAY,MAEdD,EAAU,MALR,OAMV,EAKKK,EAAkBN,EAAS,IACxB,CAACD,EAAmB,OAASE,EAAU,QAAU,SACpD,QACAA,EAAU,KACf,EAEKM,EAAWP,EAAS,KACjB,CACL,MAAOP,EACP,KAAMD,EACN,OAAQ,EAAA,GACRS,EAAU,KAAK,CAClB,EAEM,MAAA,CACL,UAAAA,EACA,YAAAC,EACA,mBAAAG,EACA,gBAAAC,EACA,SAAAC,CACF,CACF"}