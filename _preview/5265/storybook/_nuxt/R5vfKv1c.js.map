{"version":3,"file":"R5vfKv1c.js","sources":["../../src/components/VHeader/VHeaderMobile/VShowResultsButton.vue"],"sourcesContent":["<script setup lang=\"ts\">\n/**\n * This button dismisses the open modal for changing content types or applying\n * filters and takes the user back to the results.\n */\nimport { computed } from \"vue\"\n\nimport VButton from \"~/components/VButton.vue\"\n\nwithDefaults(\n  defineProps<{\n    /**\n     * whether the results are being updated behind the open modal\n     */\n    isFetching?: boolean\n  }>(),\n  {\n    isFetching: false,\n  }\n)\n\ndefineEmits<{\n  click: []\n}>()\n\nconst diameter = 8 // px\nconst spacing = 8 // px\n\nconst radius = computed(() => diameter / 2)\nconst width = computed(() => diameter * 3 + spacing * 2)\n</script>\n\n<template>\n  <VButton\n    variant=\"filled-pink-8\"\n    size=\"large\"\n    class=\"label-bold relative ms-auto\"\n    @click=\"$emit('click')\"\n  >\n    <!-- Loading animation -->\n    <span\n      v-if=\"isFetching\"\n      class=\"absolute inset-0 flex items-center justify-center\"\n    >\n      <svg\n        :viewBox=\"`0 0 ${width} ${diameter}`\"\n        :width=\"width\"\n        :height=\"diameter\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        aria-hidden=\"true\"\n        fill=\"currentColor\"\n        class=\"loading motion-reduce:animate-pulse\"\n        :style=\"{ '--spacing': `${spacing}px`, '--diameter': `${diameter}px` }\"\n      >\n        <circle\n          v-for=\"idx in 3\"\n          :id=\"`dot-${idx}`\"\n          :key=\"idx\"\n          :r=\"radius\"\n          :cx=\"(idx - 1) * (spacing + diameter) + radius\"\n          cy=\"4\"\n        />\n      </svg>\n      <span class=\"sr-only\">\n        {{ $t(\"header.loading\") }}\n      </span>\n    </span>\n\n    <!-- To preserve the button width when state changes, this element is not\n    removed from the DOM, only hidden and muted. -->\n    <span\n      :class=\"{ 'opacity-0': isFetching }\"\n      :aria-hidden=\"isFetching || undefined\"\n    >\n      {{ $t(\"header.seeResults\") }}\n    </span>\n  </VButton>\n</template>\n\n<style>\n/*\n  Dot #2 becomes visible as soon as dot #3 as passed over it. This avoids the\n  need to translate 2 dots and ensure that their movements are perfectly\n  synchronised.\n */\n@keyframes dot-2 {\n  0%,\n  49% {\n    @apply opacity-0;\n  }\n  50%,\n  100% {\n    @apply opacity-100;\n  }\n}\n\n/*\n  Dot #3 is animated between 10% and 90% to simulate the pause in both the start\n  and end state, before the animation loops itself.\n */\n@keyframes dot-3 {\n  0%,\n  10% {\n    transform: translateX(calc(-2 * (var(--spacing) + var(--diameter))));\n  }\n  90%,\n  100% {\n    @apply translate-x-0;\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .loading #dot-2 {\n    animation: dot-2 1s infinite ease-in-out alternate;\n  }\n\n  .loading #dot-3 {\n    animation: dot-3 1s infinite ease-in-out alternate;\n  }\n}\n</style>\n"],"names":["diameter","spacing","radius","computed","width"],"mappings":"0mBAyBMA,EAAW,EACXC,EAAU,yGAEhB,MAAMC,EAASC,EAAS,IAAMH,EAAW,CAAC,EACpCI,EAAQD,EAAS,IAAMH,EAAW,EAAIC,EAAU,CAAC"}