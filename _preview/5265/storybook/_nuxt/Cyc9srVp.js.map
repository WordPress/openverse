{"version":3,"file":"Cyc9srVp.js","sources":["../../shared/utils/case.ts"],"sourcesContent":["// Copied from https://github.com/blakeembrey/change-case\n// Case-related utility functions are vendored in because `case` package\n// cannot be used in Nuxt 3 which requires ESM compatibility.\n\n// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu\n\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu\n\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\0$2\"\n\n/**\n * Split any cased input strings into an array of words.\n */\nfunction split(input: string | undefined) {\n  if (!input) {\n    return []\n  }\n\n  let result = input.trim()\n\n  result = result\n    .replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE)\n    .replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE)\n    .replace(DEFAULT_STRIP_REGEXP, \"\\0\")\n\n  let start = 0\n  let end = result.length\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") {\n    start++\n  }\n  if (start === end) {\n    return []\n  }\n  while (result.charAt(end - 1) === \"\\0\") {\n    end--\n  }\n\n  return result.slice(start, end).split(/\\0/g)\n}\n\nfunction pascalCaseTransformFactory() {\n  return (word: string, index: number) => {\n    const char0 = word[0]\n    const initial =\n      index > 0 && char0 >= \"0\" && char0 <= \"9\"\n        ? \"_\" + char0\n        : char0.toUpperCase()\n    return initial + word.slice(1).toLowerCase()\n  }\n}\n\nfunction capitalCaseTransformFactory() {\n  return (word: string) =>\n    `${word[0].toUpperCase()}${word.slice(1).toLowerCase()}`\n}\n\n/**\n * Convert a string to camel case (`fooBar`).\n */\nexport function camelCase(input: string) {\n  const transform = pascalCaseTransformFactory()\n  return split(input)\n    .map((word, index) => {\n      if (index === 0) {\n        return word.toLowerCase()\n      }\n      return transform(word, index)\n    })\n    .join(\"\")\n}\n\n/**\n * Convert a string to capital case (`Foo Bar`).\n */\nexport function capitalCase(input: string) {\n  return split(input).map(capitalCaseTransformFactory()).join(\" \")\n}\n"],"names":["SPLIT_LOWER_UPPER_RE","SPLIT_UPPER_UPPER_RE","DEFAULT_STRIP_REGEXP","SPLIT_REPLACE_VALUE","split","input","result","start","end","pascalCaseTransformFactory","word","index","char0","capitalCaseTransformFactory","camelCase","transform","capitalCase"],"mappings":"+UAKA,MAAMA,EAAuB,WAAA,0BAAA,IAAA,EACvBC,EAAuB,WAAA,gCAAA,IAAA,EAGvBC,EAAuB,iBAGvBC,EAAsB,SAK5B,SAASC,EAAMC,EAA2B,CACxC,GAAI,CAACA,EACH,MAAO,CAAC,EAGN,IAAAC,EAASD,EAAM,KAAK,EAEfC,EAAAA,EACN,QAAQN,EAAsBG,CAAmB,EACjD,QAAQF,EAAsBE,CAAmB,EACjD,QAAQD,EAAsB,IAAI,EAErC,IAAIK,EAAQ,EACRC,EAAMF,EAAO,OAGjB,KAAOA,EAAO,OAAOC,CAAK,IAAM,MAC9BA,IAEF,GAAIA,IAAUC,EACZ,MAAO,CAAC,EAEV,KAAOF,EAAO,OAAOE,EAAM,CAAC,IAAM,MAChCA,IAGF,OAAOF,EAAO,MAAMC,EAAOC,CAAG,EAAE,MAAM,KAAK,CAC7C,CAEA,SAASC,GAA6B,CAC7B,MAAA,CAACC,EAAcC,IAAkB,CAChC,MAAAC,EAAQF,EAAK,CAAC,EAKpB,OAHEC,EAAQ,GAAKC,GAAS,KAAOA,GAAS,IAClC,IAAMA,EACNA,EAAM,YAAY,GACPF,EAAK,MAAM,CAAC,EAAE,YAAY,CAC7C,CACF,CAEA,SAASG,GAA8B,CACrC,OAAQH,GACN,GAAGA,EAAK,CAAC,EAAE,aAAa,GAAGA,EAAK,MAAM,CAAC,EAAE,YAAa,CAAA,EAC1D,CAKO,SAASI,EAAUT,EAAe,CACvC,MAAMU,EAAYN,EAA2B,EAC7C,OAAOL,EAAMC,CAAK,EACf,IAAI,CAACK,EAAMC,IACNA,IAAU,EACLD,EAAK,YAAY,EAEnBK,EAAUL,EAAMC,CAAK,CAC7B,EACA,KAAK,EAAE,CACZ,CAKO,SAASK,EAAYX,EAAe,CAClC,OAAAD,EAAMC,CAAK,EAAE,IAAIQ,GAA6B,EAAE,KAAK,GAAG,CACjE"}