{"version":3,"file":"C5bxlBmD.js","sources":["../../src/components/VContentSwitcher/VSearchTypeItem.vue","../../src/components/VContentSwitcher/VSearchTypes.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed } from \"vue\"\n\nimport { BETA, contentStatus, SearchType } from \"#shared/constants/media\"\nimport { isSearchTypeSupported, useSearchStore } from \"~/stores/search\"\nimport useSearchType from \"~/composables/use-search-type\"\n\nimport VIcon from \"~/components/VIcon/VIcon.vue\"\nimport VItem from \"~/components/VItemGroup/VItem.vue\"\nimport VPill from \"~/components/VPill.vue\"\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * The search type to render.\n     */\n    item: SearchType\n    /**\n     * Used for correctly handling keyboard navigation in VItem.\n     */\n    isFirst?: boolean\n    selected?: boolean\n    /**\n     * The icon used for the search type.\n     */\n    icon: string\n    /**\n     * Whether to use a `/search/image/?<query>` link or a button.\n     */\n    useLinks?: boolean\n  }>(),\n  {\n    isFirst: false,\n    selected: false,\n    useLinks: true,\n  }\n)\n\ndefineEmits<{ click: [SearchType] }>()\n\nconst searchStore = useSearchStore()\nconst { getSearchTypeProps } = useSearchType({ component: \"VSearchTypeItem\" })\n\nconst itemLabelKey = computed(() => getSearchTypeProps(props.item).label)\n\n/**\n * Currently, there are no Beta search types, so TS raises an error saying\n * that this condition will always return false.\n */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\nconst isBeta = computed(() => contentStatus[props.item] === BETA)\n\nconst href = computed(() => {\n  if (!props.useLinks || !isSearchTypeSupported(props.item)) {\n    return undefined\n  }\n  return searchStore.getSearchPath({ type: props.item })\n})\n\n/**\n * The query sets the filters that are applicable for the specific search type.\n */\nconst component = computed(() => (props.useLinks ? \"VLink\" : undefined))\n</script>\n\n<template>\n  <VItem\n    :selected=\"selected\"\n    :is-first=\"isFirst\"\n    :as=\"component\"\n    class=\"label-regular\"\n    v-bind=\"{ href }\"\n    @click=\"$emit('click', item)\"\n  >\n    <VIcon :name=\"icon\" class=\"h-6 w-6\" />\n    <span>{{ itemLabelKey }}</span>\n    <VPill v-if=\"isBeta\" class=\"ms-auto\">{{\n      $t(\"searchType.statusBeta\")\n    }}</VPill>\n  </VItem>\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\"\n\nimport type { SearchType } from \"#shared/constants/media\"\nimport useSearchType from \"~/composables/use-search-type\"\n\nimport VItemGroup from \"~/components/VItemGroup/VItemGroup.vue\"\nimport VSearchTypeItem from \"~/components/VContentSwitcher/VSearchTypeItem.vue\"\n\ntype ContentTypeGroup = {\n  heading: string\n  items: SearchType[]\n}\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * 'Small' size is used in the popover,\n     * 'medium' size is used in the mobile modal.\n     */\n    size?: \"small\" | \"medium\"\n    /**\n     * Whether to use buttons for search type selection, or links to the specific search type search pages.\n     */\n    useLinks?: boolean\n  }>(),\n  {\n    size: \"small\",\n    useLinks: true,\n  }\n)\n\nconst emit = defineEmits<{ select: [SearchType] }>()\n\nconst content = useSearchType({ component: \"VSearchTypes\" })\nconst bordered = computed(() => props.size === \"medium\")\n\nconst isActive = (item: SearchType) => item === content.activeType.value\n\nconst contentTypeGroups = computed<ContentTypeGroup[]>(() => {\n  const base: ContentTypeGroup[] = [\n    {\n      heading: \"heading\",\n      items: content.types,\n    },\n  ]\n\n  if (content.additionalTypes.value.length) {\n    base.push({\n      heading: \"additional\",\n      items: [...content.additionalTypes.value],\n    })\n  }\n\n  return base\n})\n\nconst selectItem = (item: SearchType) => {\n  content.setActiveType(item)\n  emit(\"select\", item)\n}\n</script>\n\n<template>\n  <VItemGroup\n    direction=\"vertical\"\n    :size=\"size\"\n    :bordered=\"bordered\"\n    type=\"radiogroup\"\n  >\n    <div\n      v-for=\"(category, index) in contentTypeGroups\"\n      :key=\"category.heading\"\n      class=\"flex flex-col\"\n      :class=\"{\n        'border-t border-default bg-surface': index > 0 && !bordered,\n        'w-66 gap-1 py-2': size === 'small',\n      }\"\n    >\n      <h4\n        v-if=\"index !== 0\"\n        :class=\"bordered ? 'ps-0' : 'ps-6'\"\n        class=\"category pb-4 pt-6\"\n      >\n        {{ $t(`searchType.${category.heading}`) }}\n      </h4>\n      <VSearchTypeItem\n        v-for=\"(item, idx) in category.items\"\n        :key=\"item\"\n        :item=\"item\"\n        :is-first=\"index === 0 && idx === 0\"\n        :icon=\"content.icons[item]\"\n        :use-links=\"useLinks\"\n        :selected=\"isActive(item)\"\n        @click=\"selectItem(item)\"\n      />\n    </div>\n  </VItemGroup>\n</template>\n"],"names":["props","__props","searchStore","useSearchStore","getSearchTypeProps","useSearchType","itemLabelKey","computed","isBeta","contentStatus","BETA","href","isSearchTypeSupported","component","emit","__emit","content","bordered","isActive","item","contentTypeGroups","base","selectItem"],"mappings":"k2BAWA,MAAMA,EAAQC,EA6BRC,EAAcC,EAAe,EAC7B,CAAE,mBAAAC,CAAmB,EAAIC,EAAc,CAAE,UAAW,kBAAmB,EAEvEC,EAAeC,EAAS,IAAMH,EAAmBJ,EAAM,IAAI,EAAE,KAAK,EAQlEQ,EAASD,EAAS,IAAME,EAAcT,EAAM,IAAI,IAAMU,CAAI,EAE1DC,EAAOJ,EAAS,IAAM,CAC1B,GAAI,GAACP,EAAM,UAAY,CAACY,EAAsBZ,EAAM,IAAI,GAGxD,OAAOE,EAAY,cAAc,CAAE,KAAMF,EAAM,KAAM,CAAA,CACtD,EAKKa,EAAYN,EAAS,IAAOP,EAAM,SAAW,QAAU,MAAU,24CCjDvE,MAAMA,EAAQC,EAkBRa,EAAOC,EAEPC,EAAUX,EAAc,CAAE,UAAW,eAAgB,EACrDY,EAAWV,EAAS,IAAMP,EAAM,OAAS,QAAQ,EAEjDkB,EAAYC,GAAqBA,IAASH,EAAQ,WAAW,MAE7DI,EAAoBb,EAA6B,IAAM,CAC3D,MAAMc,EAA2B,CAC/B,CACE,QAAS,UACT,MAAOL,EAAQ,KAAA,CAEnB,EAEI,OAAAA,EAAQ,gBAAgB,MAAM,QAChCK,EAAK,KAAK,CACR,QAAS,aACT,MAAO,CAAC,GAAGL,EAAQ,gBAAgB,KAAK,CAAA,CACzC,EAGIK,CAAA,CACR,EAEKC,EAAcH,GAAqB,CACvCH,EAAQ,cAAcG,CAAI,EAC1BL,EAAK,SAAUK,CAAI,CACrB;"}