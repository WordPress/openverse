{"version":3,"file":"DQR6Jndg.js","sources":["../../shared/constants/z-indices.ts","../../src/components/VPopover/VPopover.vue"],"sourcesContent":["/**\n * mapping of z-index names to z-indices; Ensure that these values are also\n * written in the `tailwind.safelist.txt` file in the project root.\n */\nexport const Z_INDICES = Object.freeze({\n  auto: \"auto\",\n  10: \"10\",\n  20: \"20\",\n  30: \"30\",\n  40: \"40\",\n  50: \"50\",\n  // Named indices\n  popover: \"50\",\n  \"focus-ring\": \"10\",\n  snackbar: \"20\",\n  \"global-audio\": \"20\",\n} as const)\n\n/**\n * Check whether the given z-index is valid and is configured in Tailwind.\n *\n * @param value - the provided z-index to validate\n * @returns - whether the z-index is valid and configured in Tailwind\n */\nexport const zIndexValidator = (value: string | number): boolean =>\n  Object.keys(Z_INDICES).includes(value.toString())\n\nexport type ZIndex = keyof typeof Z_INDICES\n","<script setup lang=\"ts\">\n/**\n * NB: Most of these technically default to `undefined` so that the underlying `VPopoverContent`\n * default for each of them can take over.\n */\nimport { ref, computed, SetupContext } from \"vue\"\n\nimport { type ZIndex, zIndexValidator } from \"#shared/constants/z-indices\"\nimport { useDialogControl } from \"~/composables/use-dialog-control\"\n\nimport VPopoverContent from \"~/components/VPopover/VPopoverContent.vue\"\n\nimport type { Placement, Strategy } from \"@floating-ui/dom\"\n\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * The id used to keep track of the popover in the open dialog stack, to enable\n     * nested dialogs.\n     */\n    id: string\n    /**\n     * Whether the popover should show when the trigger is hovered on.\n     */\n    activateOnHover?: boolean\n    /**\n     * Whether the popover should hide when the <kbd>Escape</kbd> key is pressed.\n     *\n     * @default true\n     */\n    hideOnEsc?: boolean\n    /**\n     * Whether the popover should hide when a click happens outside the popover content,\n     * excluding the trigger. When the trigger is clicked and the popover is open, nothing\n     * will happen.\n     *\n     * @default true\n     */\n    hideOnClickOutside?: boolean\n    /**\n     * Whether the popover content should automatically receive focus when the popover\n     * opens.\n     *\n     * @default true\n     */\n    autoFocusOnShow?: boolean\n    /**\n     * Whether the trigger should automatically receive focus when the popover closes.\n     *\n     * @default true\n     */\n    autoFocusOnHide?: boolean\n    /**\n     * The placement of the popover relative to the trigger. Should be one of the options\n     * for `placement` passed to floating-ui.\n     *\n     * @see https://floating-ui.com/docs/tutorial#placements\n     *\n     * @default 'bottom'\n     */\n    placement?: Placement /**\n     * The positioning strategy of the popover. If your reference element is in a fixed container\n     * use the fixed strategy; otherwise use the default, absolute strategy.\n     *\n     * @see https://floating-ui.com/docs/computeposition#strategy\n     *\n     * @default 'absolute'\n     */\n    strategy?: Strategy\n    /**\n     * The label of the popover content. Must be provided if `labelledBy` is empty.\n     *\n     * @default undefined\n     */\n    label?: string\n    /**\n     * The id of the element labelling the popover content. Must be provided if `label` is empty.\n     *\n     * @default undefined\n     */\n    labelledBy?: string\n    /**\n     * the z-index to apply to the popover content\n     */\n    zIndex?: ZIndex\n    /**\n     * Whether the popover height should be clipped and made scrollable\n     * if the window height is too small.\n     *\n     * @default false\n     */\n    clippable?: boolean\n    /**\n     * Whether the popover should trap focus. This means that when the popover is open,\n     * the user cannot tab out of the popover content. This is useful for ensuring that\n     * the popover content is accessible.\n     * @default true\n     */\n    trapFocus?: boolean\n  }>(),\n  {\n    activateOnHover: undefined,\n    hideOnEsc: undefined,\n    hideOnClickOutside: undefined,\n    autoFocusOnShow: undefined,\n    autoFocusOnHide: undefined,\n    zIndex: \"popover\",\n    clippable: false,\n    trapFocus: undefined,\n  }\n)\n\nif (!zIndexValidator(props.zIndex)) {\n  throw new Error(`Invalid z-index value in VPopover: ${props.zIndex}`)\n}\n\nconst emit = defineEmits<{\n  /**\n   * Fires when the popover opens, regardless of reason. There are no extra parameters.\n   */\n  open: []\n  /**\n   * Fires when the popover closes, regardless of reason. There are no extra parameters.\n   */\n  close: []\n}>()\n\nconst visibleRef = ref(false)\nconst triggerContainerRef = ref<HTMLElement | null>(null)\n\nconst triggerRef = computed(() =>\n  triggerContainerRef.value?.firstElementChild\n    ? (triggerContainerRef.value.firstElementChild as HTMLElement)\n    : undefined\n)\n\nconst { close, onTriggerClick, triggerA11yProps } = useDialogControl({\n  id: props.id,\n  visibleRef,\n  emit: emit as SetupContext[\"emit\"],\n})\n\ndefineExpose({\n  close,\n})\n</script>\n\n<template>\n  <div>\n    <!-- re: disabled static element interactions rule https://github.com/WordPress/openverse/issues/2906 -->\n    <!-- eslint-disable-next-line vuejs-accessibility/click-events-have-key-events, vuejs-accessibility/no-static-element-interactions -->\n    <div\n      ref=\"triggerContainerRef\"\n      class=\"flex w-min items-stretch whitespace-nowrap\"\n      @click=\"onTriggerClick\"\n    >\n      <!--\n        @slot The trigger, should be a button 99.99% of the time. If you need custom event handling on the trigger button, ensure bubbling is not prevented or else the popover will not open\n          @binding {object} a11yProps\n          @binding {boolean} visible\n      -->\n      <slot\n        name=\"trigger\"\n        :a11y-props=\"triggerA11yProps\"\n        :visible=\"visibleRef\"\n      />\n    </div>\n    <VPopoverContent\n      v-if=\"triggerRef\"\n      :id=\"id\"\n      :z-index=\"zIndex\"\n      :visible=\"visibleRef\"\n      :trigger-element=\"triggerRef\"\n      :placement=\"placement\"\n      :strategy=\"strategy\"\n      :clippable=\"clippable\"\n      :hide-on-esc=\"hideOnEsc\"\n      :hide-on-click-outside=\"hideOnClickOutside\"\n      :auto-focus-on-show=\"autoFocusOnShow\"\n      :auto-focus-on-hide=\"autoFocusOnHide\"\n      :trap-focus=\"trapFocus\"\n      :hide=\"close\"\n      :aria-label=\"label\"\n      :aria-labelledby=\"labelledBy\"\n    >\n      <!--\n        @slot The content of the popover\n          @binding {function} close\n      -->\n      <slot name=\"default\" :close=\"close\" />\n    </VPopoverContent>\n  </div>\n</template>\n"],"names":["Z_INDICES","zIndexValidator","value","props","__props","emit","__emit","visibleRef","ref","triggerContainerRef","triggerRef","computed","_a","close","onTriggerClick","triggerA11yProps","useDialogControl","__expose"],"mappings":"2fAIa,MAAAA,EAAY,OAAO,OAAO,CACrC,KAAM,OACN,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KACJ,GAAI,KAEJ,QAAS,KACT,aAAc,KACd,SAAU,KACV,eAAgB,IAClB,CAAU,EAQGC,EAAmBC,GAC9B,OAAO,KAAKF,CAAS,EAAE,SAASE,EAAM,UAAU,mdCXlD,MAAMC,EAAQC,EAkGd,GAAI,CAACH,EAAgBE,EAAM,MAAM,EAC/B,MAAM,IAAI,MAAM,sCAAsCA,EAAM,MAAM,EAAE,EAGtE,MAAME,EAAOC,EAWPC,EAAaC,EAAI,EAAK,EACtBC,EAAsBD,EAAwB,IAAI,EAElDE,EAAaC,EAAS,IAC1B,OAAA,OAAAC,EAAAH,EAAoB,QAApB,MAAAG,EAA2B,kBACtBH,EAAoB,MAAM,kBAC3B,OACN,EAEM,CAAE,MAAAI,EAAO,eAAAC,EAAgB,iBAAAC,CAAA,EAAqBC,EAAiB,CACnE,GAAIb,EAAM,GACV,WAAAI,EACA,KAAAF,CAAA,CACD,EAEY,OAAAY,EAAA,CACX,MAAAJ,CAAA,CACD;;;;;;;;"}