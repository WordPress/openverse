{"version":3,"file":"DOn4i9uW.js","sources":["../../shared/utils/license.ts"],"sourcesContent":["/*\n * This module highly mirrors the Python code present in the backend repository.\n * For any changes made here, please make the corresponding changes in the\n * backend, or open an issue to track it.\n */\nimport type {\n  License,\n  LicenseVersion,\n  LicenseElement,\n} from \"#shared/constants/license\"\nimport {\n  CC_LICENSES,\n  DEPRECATED_CC_LICENSES,\n  PUBLIC_DOMAIN_MARKS,\n} from \"#shared/constants/license\"\nimport { camelCase } from \"#shared/utils/case\"\n\nimport type { Composer } from \"vue-i18n\"\n\n/**\n * Get the full name of the license in a displayable format from the license\n * slug and version.\n *\n * @param license - the slug of the license\n * @param licenseVersion - the version number of the license\n * @param t - the t i18n function to access translations\n * @returns the full name of the license\n */\nexport const getFullLicenseName = (\n  license: License,\n  licenseVersion: LicenseVersion = \"\", // unknown version\n  t: Composer[\"t\"] | null = null\n): string => {\n  let licenseName\n\n  // PDM has no abbreviation\n  if (license === \"pdm\" && !!t) {\n    licenseName = t(`licenseReadableNames.${camelCase(license)}`)\n  } else {\n    licenseName = license.toUpperCase().replace(\"SAMPLING\", \"Sampling\")\n  }\n\n  // If version is known, append version to the name\n  if (licenseVersion) {\n    licenseName = `${licenseName} ${licenseVersion}`\n  }\n\n  // For licenses other than public-domain marks, prepend 'CC' to the name\n  if (!(PUBLIC_DOMAIN_MARKS as ReadonlyArray<License>).includes(license)) {\n    licenseName = `CC ${licenseName}`\n  }\n  return licenseName.trim()\n}\n\n/**\n * Get the URL to the deed of the license.\n *\n * @param license - the slug of license\n * @param licenseVersion - the version number of the license\n * @returns the URL to the license deed\n */\nexport const getLicenseUrl = (\n  license: License,\n  licenseVersion: LicenseVersion = \"\"\n) => {\n  let fragment\n  if (license === \"cc0\") {\n    fragment = \"publicdomain/zero/1.0\"\n  } else if (license === \"pdm\") {\n    fragment = \"publicdomain/mark/1.0\"\n  } else if (isDeprecated(license)) {\n    fragment = `licenses/${license}/1.0`\n  } else {\n    fragment = `licenses/${license}/${licenseVersion || \"4.0\"}`\n  }\n  return `https://creativecommons.org/${fragment}/?ref=openverse`\n}\n\n/**\n * CC licenses have different legal status from the public domain marks\n * such as CC0 and PDM, and need different wording. Check if the given name\n * belongs to a license and is not a public-domain mark.\n *\n * @param license - the license slug to check\n * @returns `false` if `license` is 'cc0' or 'pdm', `true` otherwise\n */\nexport const isLicense = (license: License): boolean => !isPublicDomain(license)\n\n/**\n * CC licenses have different legal status from the public domain marks\n * such as CC0 and PDM, and need different wording. Check if the given name\n * belongs to a public-domain mark and is not a license.\n *\n * @param license - the license slug to check\n * @returns `true` if `license` is 'cc0' or 'pdm', `false` otherwise\n */\nexport const isPublicDomain = (license: License): boolean =>\n  (PUBLIC_DOMAIN_MARKS as ReadonlyArray<string>).includes(license)\n\n/**\n * Check if the given name belongs to a deprecated CC license. The full list of\n * deprecated licenses can be found on the\n * [Retired Legal Tools page](https://creativecommons.org/retiredlicenses/) on\n * the CC.org site.\n *\n * @param license - the license slug to check\n * @returns `true` if the license is a deprecated CC license, `false` otherwise\n */\nexport const isDeprecated = (license: License): boolean =>\n  (DEPRECATED_CC_LICENSES as ReadonlyArray<License>).includes(license)\n\n/**\n * Check if the given name belongs to a CC license, active or deprecated. This\n * includes CC0, which although not technically a license, is offered by CC.\n *\n * @param license - the license slug to check\n * @returns `true` if the license is a CC license, `false` otherwise\n */\nexport const isCc = (license: License): boolean =>\n  license == \"cc0\" ||\n  (CC_LICENSES as ReadonlyArray<License>).includes(license) ||\n  (DEPRECATED_CC_LICENSES as ReadonlyArray<License>).includes(license)\n\n/**\n * Get the list of elements that comprise the given license or mark.\n *\n * @param license - the license for which to get the elements\n */\nexport const getElements = (license: License): LicenseElement[] => {\n  if (license === \"pdm\") {\n    return [\"pd\"]\n  }\n\n  const icons: LicenseElement[] = [\"cc\"]\n  if (license === \"cc0\") {\n    icons.push(\"zero\")\n  } else {\n    const replacements: Record<string, LicenseElement> = {\n      \"sampling+\": \"sampling-plus\",\n    }\n    const elements = license\n      .split(\"-\")\n      .map((element) =>\n        element in replacements\n          ? replacements[element]\n          : (element as LicenseElement)\n      )\n    icons.push(...elements)\n  }\n  return icons\n}\n"],"names":["getFullLicenseName","license","licenseVersion","t","licenseName","camelCase","PUBLIC_DOMAIN_MARKS","getLicenseUrl","fragment","isDeprecated","isLicense","isPublicDomain","DEPRECATED_CC_LICENSES","getElements","icons","replacements","elements","element"],"mappings":"0ZA4BO,MAAMA,EAAqB,CAChCC,EACAC,EAAiC,GACjCC,EAA0B,OACf,CACP,IAAAC,EAGJ,OAAIH,IAAY,OAAWE,EACzBC,EAAcD,EAAE,wBAAwBE,EAAUJ,CAAO,CAAC,EAAE,EAE5DG,EAAcH,EAAQ,YAAA,EAAc,QAAQ,WAAY,UAAU,EAIhEC,IACYE,EAAA,GAAGA,CAAW,IAAIF,CAAc,IAI1CI,EAA+C,SAASL,CAAO,IACnEG,EAAc,MAAMA,CAAW,IAE1BA,EAAY,KAAK,CAC1B,EASaG,EAAgB,CAC3BN,EACAC,EAAiC,KAC9B,CACC,IAAAM,EACJ,OAAIP,IAAY,MACHO,EAAA,wBACFP,IAAY,MACVO,EAAA,wBACFC,EAAaR,CAAO,EAC7BO,EAAW,YAAYP,CAAO,OAE9BO,EAAW,YAAYP,CAAO,IAAIC,GAAkB,KAAK,GAEpD,+BAA+BM,CAAQ,iBAChD,EAUaE,EAAaT,GAA8B,CAACU,EAAeV,CAAO,EAUlEU,EAAkBV,GAC5BK,EAA8C,SAASL,CAAO,EAWpDQ,EAAgBR,GAC1BW,EAAkD,SAASX,CAAO,EAmBxDY,EAAeZ,GAAuC,CACjE,GAAIA,IAAY,MACd,MAAO,CAAC,IAAI,EAGR,MAAAa,EAA0B,CAAC,IAAI,EACrC,GAAIb,IAAY,MACda,EAAM,KAAK,MAAM,MACZ,CACL,MAAMC,EAA+C,CACnD,YAAa,eACf,EACMC,EAAWf,EACd,MAAM,GAAG,EACT,IAAKgB,GACJA,KAAWF,EACPA,EAAaE,CAAO,EACnBA,CACP,EACIH,EAAA,KAAK,GAAGE,CAAQ,CAAA,CAEjB,OAAAF,CACT"}