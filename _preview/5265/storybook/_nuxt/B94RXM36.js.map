{"version":3,"file":"B94RXM36.js","sources":["../../../node_modules/.pnpm/@nuxtjs+robots@5.0.0_magicast@0.3.5_rollup@4.27.4_vite@6.0.1_@types+node@22.8.5_jiti@2.4.2_te_phoajm75vhkmhp23uba4l5tyfa/node_modules/@nuxtjs/robots/dist/runtime/app/composables/useRobotsRule.js","../../../node_modules/.pnpm/nuxt-site-config@3.0.4_magicast@0.3.5_rollup@4.27.4_vite@6.0.1_@types+node@22.8.5_jiti@2.4.2__km2wgo7gyeep7tzvy2uaii6p7e/node_modules/nuxt-site-config/dist/runtime/app/composables/useSiteConfig.js","../../src/composables/use-page-robots-rule.ts"],"sourcesContent":["import { injectHead, useServerHead } from \"@unhead/vue\";\nimport { setHeader } from \"h3\";\nimport {\n  useRequestEvent,\n  useRuntimeConfig\n} from \"nuxt/app\";\nimport { computed, onBeforeUnmount, ref, toValue } from \"vue\";\nexport function useRobotsRule(rule) {\n  const head = injectHead();\n  if (import.meta.client) {\n    const robotsRef = ref(document.querySelector('meta[name=\"robots\"]')?.getAttribute(\"content\") || \"\");\n    const _ = head.hooks.hook(\"dom:rendered\", () => {\n      robotsRef.value = document.querySelector('meta[name=\"robots\"]')?.getAttribute(\"content\") || \"\";\n    });\n    onBeforeUnmount(_);\n    return robotsRef;\n  }\n  const config = useRuntimeConfig();\n  const event = useRequestEvent();\n  function setRobotsRule(rule2) {\n    let _rule = toValue(rule2);\n    if (!event || typeof _rule === \"undefined\")\n      return;\n    if (typeof _rule === \"boolean\" || !_rule) {\n      _rule = _rule ? config[\"nuxt-robots\"].robotsEnabledValue : config[\"nuxt-robots\"].robotsDisabledValue;\n    }\n    event.context.robots.rule = _rule;\n    if (config[\"nuxt-robots\"].header) {\n      setHeader(event, \"X-Robots-Tag\", _rule);\n    }\n    useServerHead({\n      meta: [\n        {\n          name: \"robots\",\n          content: _rule\n        }\n      ]\n    }, {\n      head\n    });\n  }\n  setRobotsRule(rule);\n  return computed({\n    set(val) {\n      setRobotsRule(val);\n    },\n    get() {\n      return event?.context?.robots?.rule;\n    }\n  });\n}\n","import {\n  useNuxtApp,\n  useRequestEvent\n} from \"#imports\";\nimport { defu } from \"defu\";\nexport function useSiteConfig(options) {\n  let stack;\n  if (process.server)\n    stack = useRequestEvent().context.siteConfig.get(defu({ resolveRefs: true }, options));\n  else\n    stack = useNuxtApp().$nuxtSiteConfig;\n  return stack || {};\n}\n","import { useRobotsRule, useSiteConfig } from \"#imports\"\n\n/**\n * Robots meta tag and header instructions for pages\n * These are distinct from robots.txt rules because do not\n * want to prevent bots from viewing the pages altogether\n * in case they are visiting for e.g., embed information.\n * We _do_ want to disallow following links that will cause\n * rapid and unwanted crawling behaviour (e.g., related\n * results on a single result page, collection results, etc)\n *\n * Pages not listed here are either covered by the robots.txt\n * rules configured in nuxt.config.ts or are allowed to be\n * crawled with default settings (index and follow links)\n */\nconst pageRobots = {\n  \"single-result\": \"noindex, nofollow\",\n  \"tag-collection\": \"noindex, nofollow\",\n  \"source-collection\": \"index, nofollow\",\n  \"creator-collection\": \"noindex, nofollow\",\n} as const\n\nexport const usePageRobotsRule = (page: keyof typeof pageRobots) => {\n  const siteConfig = useSiteConfig()\n  if (!siteConfig.indexable) {\n    useRobotsRule(\"noindex, nofollow\")\n  } else {\n    useRobotsRule(pageRobots[page])\n  }\n}\n"],"names":["useRobotsRule","rule","head","injectHead","robotsRef","ref","_a","_","onBeforeUnmount","useSiteConfig","options","stack","useNuxtApp","usePageRobotsRule","page"],"mappings":"kdAOO,SAASA,EAAcC,EAAM,OAClC,MAAMC,EAAOC,EAAY,EACD,CACtB,MAAMC,EAAYC,IAAIC,EAAA,SAAS,cAAc,qBAAqB,IAA5C,YAAAA,EAA+C,aAAa,aAAc,EAAE,EAC5FC,EAAIL,EAAK,MAAM,KAAK,eAAgB,IAAM,OAC9CE,EAAU,QAAQE,EAAA,SAAS,cAAc,qBAAqB,IAA5C,YAAAA,EAA+C,aAAa,aAAc,EAClG,CAAK,EACD,OAAAE,EAAgBD,CAAC,EACVH,CACX,CAkCA,CC7CO,SAASK,EAAcC,EAAS,CACjC,IAAAC,EAIF,OAAAA,EAAQC,IAAa,gBAChBD,GAAS,CAAC,CACnB,CCUa,MAAAE,EAAqBC,GAAkC,CAC/CL,EAAc,EACjB,UAGAT,EAAgB,CAElC","x_google_ignoreList":[0,1]}