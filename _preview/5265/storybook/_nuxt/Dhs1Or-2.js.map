{"version":3,"file":"Dhs1Or-2.js","sources":["../../src/components/VButton.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { watch, computed, useAttrs } from \"vue\"\n\nimport { skipToContentTargetId } from \"#shared/constants/window\"\nimport type {\n  ButtonConnections,\n  ButtonForm,\n  ButtonSize,\n  ButtonType,\n  ButtonVariant,\n} from \"#shared/types/button\"\nimport { warn } from \"~/utils/console\"\n\nimport VLink from \"~/components/VLink.vue\"\n\n/**\n * A button component that behaves just like a regular HTML `button` element\n * aside from pre-applied styles based on the passed in variant.\n *\n * All props available for the basic `button` component are available here as\n * well, including an `as` prop which allows for component polymorphism. The\n * most common use case for this prop is to turn the `VButton` component into\n * an `anchor` element, so that you can render a link instead of a `button`.\n *\n * The accessibility helpers on this component are critical and are completely\n * adapted from Reakit's Button, Clickable, and Tabbable component implementations.\n */\nconst props = withDefaults(\n  defineProps<{\n    /**\n     * Passed to `component :is` to allow the button to *appear* as a button but\n     * work like another element (like an `anchor`). May only be either `button` or `VLink`.\n     * `anchor` is only supported for the `VSkipToContentButton` component that uses\n     * a hash URL (`skipToContentTargetId`).\n     *\n     * We do not support other elements because their use cases are marginal, and they\n     * add complexity that we can avoid otherwise.\n     *\n     * We also don't allow any old Vue component because Vue does not have ref-forwarding,\n     * so we wouldn't be able to detect the type of the DOM node that is ultimately rendered\n     * by any Vue component passed.\n     *\n     * @default 'button'\n     */\n    as?: ButtonForm\n    /**\n     * The variant of the button.\n     *\n     * Plain removes all styles except the focus ring. The button\n     * should set a border color, otherwise the browser default is used.\n     * Plain--avoid removes _all_ styles including the focus ring.\n     */\n    variant: ButtonVariant\n    /**\n     * Allows for programmatically setting the pressed state of a button,\n     * i.e., in the case of a button opening a menu.\n     */\n    pressed?: boolean\n    /**\n     * The size of the button. `disabled` removes all internal padding allowing\n     * the consumer of the component to determine the padding.\n     *\n     * @default 'medium'\n     */\n    size: ButtonSize\n    /**\n     * Whether the button is disabled. Used alone this will only\n     * visually effect the button but will not \"truly\" disable the\n     * button unless the `focusable` prop is also set to `false`.\n     *\n     * @default false\n     */\n    disabled?: boolean\n    /**\n     * Whether the button is focusable when disabled. Should be `false`\n     * in almost all cases except when a button needs to be focusable\n     * while still being disabled (in the case of a form submit button\n     * that is disabled due to an incomplete form for example).\n     *\n     * @default false\n     */\n    focusableWhenDisabled?: boolean\n    /**\n     * The HTML `type` attribute for the button. Ignored if `as` is\n     * passed as anything other than `\"button\"`.\n     *\n     * @default 'button'\n     */\n    type?: ButtonType\n    /**\n     * Whether the button is connected to another control and needs to have no rounded\n     * borders at that edge.\n     *\n     * @default []\n     */\n    connections?: ButtonConnections[]\n    /**\n     * Whether the button has an icon at the inline start of the button.\n     *\n     * @default false\n     */\n    hasIconStart?: boolean\n    /**\n     * Whether the button has an icon at the inline end of the button.\n     *\n     * @default false\n     */\n    hasIconEnd?: boolean\n    /**\n     * If the button is only an icon, width is set to height, and padding is removed.\n     */\n    iconOnly?: boolean\n  }>(),\n  {\n    as: \"button\",\n    disabled: false,\n    focusableWhenDisabled: false,\n    type: \"button\",\n    connections: () => [],\n    hasIconStart: false,\n    hasIconEnd: false,\n    iconOnly: false,\n    pressed: undefined,\n  }\n)\n\nconst buttonComponent = computed(() =>\n  props.as === \"VLink\" ? VLink : props.as\n)\n\ndefineEmits<{\n  click: [MouseEvent]\n  mousedown: [MouseEvent]\n  keydown: [KeyboardEvent]\n  focus: [FocusEvent]\n  blur: [FocusEvent]\n}>()\n\nconst attrs = useAttrs()\nconst typeAttribute = computed<ButtonType | undefined>(() =>\n  [\"VLink\", \"a\"].includes(props.as) ? undefined : props.type\n)\n\nconst connectionStyles = computed(() =>\n  props.connections.map((connection) => `connection-${connection}`).join(\" \")\n)\n\nconst isActive = computed(() => {\n  return props.pressed || attrs[\"aria-pressed\"] || attrs[\"aria-expanded\"]\n})\nconst variantClass = computed(() => {\n  if (\n    isActive.value &&\n    [\"bordered-white\", \"bordered-tx\", \"transparent-dark\"].includes(\n      props.variant\n    )\n  ) {\n    return `${props.variant}-pressed`\n  }\n  return props.variant\n})\n\nconst isPlainDangerous = computed(() => {\n  return props.variant === \"plain--avoid\"\n})\nconst isFocusSlimFilled = computed(() => {\n  return props.variant.startsWith(\"filled-\")\n})\nconst isFocusSlimTx = computed(() => {\n  return (\n    props.variant.startsWith(\"bordered-\") ||\n    props.variant.startsWith(\"transparent-\") ||\n    props.variant === \"plain\"\n  )\n})\n\nconst supportsDisabledAttribute = computed(() => props.as !== \"VLink\")\n\nconst ariaDisabled = computed<true | undefined>(\n  () =>\n    // If disabled and focusable then use `aria-disabled` instead of the `disabled` attribute to allow\n    // the button to still be tabbed into by screen reader users\n    (props.disabled && props.focusableWhenDisabled) || undefined\n)\n\nconst disabledAttribute = computed<true | undefined>(() => {\n  const trulyDisabled = props.disabled && !props.focusableWhenDisabled\n\n  return (trulyDisabled && supportsDisabledAttribute.value) || undefined\n})\n\nconst linkProps = computed(() =>\n  props.as === \"VLink\" ? { href: attrs.href } : {}\n)\n\nwatch(\n  () => props.as,\n  (as) => {\n    if (\n      [\"a\", \"NuxtLink\"].includes(as) &&\n      attrs.href !== `#${skipToContentTargetId}`\n    ) {\n      warn(\n        `Please use \\`VLink\\` with an \\`href\\` prop instead of ${as} for the button component`\n      )\n    }\n  },\n  { immediate: true }\n)\n</script>\n\n<template>\n  <Component\n    :is=\"buttonComponent\"\n    :type=\"typeAttribute\"\n    class=\"group/button button flex appearance-none items-center justify-center rounded-sm no-underline\"\n    :class=\"[\n      variantClass,\n      connectionStyles,\n      size,\n      {\n        'icon-only': iconOnly,\n        'icon-start': hasIconStart,\n        'icon-end': hasIconEnd,\n        border: !isPlainDangerous,\n        'focus-visible:outline-tx': isPlainDangerous,\n        'focus-slim-filled': isFocusSlimFilled,\n        'focus-visible:focus-slim-tx': isFocusSlimTx,\n      },\n    ]\"\n    :aria-pressed=\"pressed\"\n    :aria-disabled=\"ariaDisabled\"\n    :disabled=\"disabledAttribute\"\n    v-bind=\"linkProps\"\n    @click=\"$emit('click', $event)\"\n    @mousedown=\"$emit('mousedown', $event)\"\n    @keydown=\"$emit('keydown', $event)\"\n    @focus=\"$emit('focus', $event)\"\n    @blur=\"$emit('blur', $event)\"\n  >\n    <!--\n      @slot The content of the button\n    -->\n    <slot />\n  </Component>\n</template>\n\n<style scoped>\n.button[disabled=\"disabled\"],\n.button[aria-disabled=\"true\"] {\n  @apply cursor-not-allowed;\n}\n\na.button {\n  @apply no-underline hover:no-underline;\n}\n\n.connection-start {\n  @apply rounded-s-none;\n}\n.connection-end {\n  @apply rounded-e-none;\n}\n.connection-top {\n  @apply rounded-se-none rounded-ss-none;\n}\n.connection-bottom {\n  @apply rounded-ee-none rounded-es-none;\n}\n\n.filled-pink-8 {\n  @apply border-tx bg-primary text-over-dark hover:bg-primary-hover hover:text-over-dark;\n}\n.filled-dark {\n  @apply border-tx bg-tertiary text-over-dark hover:bg-tertiary-hover hover:text-over-dark disabled:opacity-70;\n}\n.filled-gray {\n  @apply border-tx bg-secondary text-default hover:bg-secondary-hover hover:text-over-dark;\n}\n.filled-white {\n  @apply border-tx bg-default text-default hover:bg-secondary-hover hover:text-over-dark;\n}\n.bordered-white {\n  @apply border-bg-ring bg-default text-default hover:border-transparent-hover hover:focus-visible:border-tx;\n}\n.bordered-white-pressed {\n  @apply border-tx bg-tertiary text-over-dark hover:border-hover hover:bg-tertiary-hover hover:focus-visible:border-tx;\n}\n.bordered-gray {\n  @apply border-default bg-default text-default hover:border-hover focus-visible:border-tx hover:focus-visible:border-tx;\n}\n.bordered-tx {\n  @apply border-tx bg-tx text-default hover:border-transparent-hover hover:focus-visible:border-tx dark:hover:border-[--color-gray-9];\n}\n.bordered-tx-pressed {\n  @apply border-tx bg-tertiary text-over-dark hover:border-hover;\n}\n\n.transparent-tx {\n  @apply border-tx;\n}\n.transparent-gray {\n  @apply border-tx bg-tx text-default hover:bg-transparent-hover disabled:text-disabled;\n}\n.transparent-dark {\n  @apply border-tx bg-tx text-default hover:bg-tertiary hover:text-over-dark;\n}\n.transparent-dark-pressed {\n  @apply border-tx bg-tertiary text-over-dark hover:border-hover;\n}\n\n.filled-pink-8[aria-disabled=\"true\"],\n.filled-gray[aria-disabled=\"true\"],\n.filled-dark[aria-disabled=\"true\"] {\n  @apply bg-disabled;\n}\n.filled-pink-8[aria-disabled=\"true\"],\n.filled-dark[aria-disabled=\"true\"] {\n  @apply text-over-negative;\n}\n.filled-gray[aria-disabled=\"true\"],\n.filled-white[aria-disabled=\"true\"] {\n  @apply text-disabled;\n}\n\n.icon-only {\n  @apply flex-none;\n}\n.small {\n  @apply h-8 px-2 py-0;\n}\n.small.icon-only {\n  @apply w-8 p-0;\n}\n.small.icon-start {\n  @apply gap-x-1 ps-1;\n}\n.small.icon-end {\n  @apply gap-x-1 pe-1;\n}\n\n.medium {\n  @apply h-10 px-3 py-0;\n}\n.medium.icon-only {\n  @apply w-10 p-0;\n}\n.medium.icon-start {\n  @apply gap-x-2 ps-2;\n}\n.medium.icon-end {\n  @apply gap-x-2 pe-2;\n}\n\n.large {\n  @apply h-12 px-5 py-0;\n}\n.large.icon-only {\n  @apply w-12 p-0;\n}\n.large.icon-start {\n  @apply gap-x-2 ps-4;\n}\n.large.icon-end {\n  @apply gap-x-2 pe-4;\n}\n\n.larger {\n  @apply h-16;\n}\n.larger.icon-only {\n  @apply w-16;\n}\n</style>\n"],"names":["props","__props","buttonComponent","computed","VLink","attrs","useAttrs","typeAttribute","connectionStyles","connection","isActive","variantClass","isPlainDangerous","isFocusSlimFilled","isFocusSlimTx","supportsDisabledAttribute","ariaDisabled","disabledAttribute","linkProps","watch","as","skipToContentTargetId","warn"],"mappings":"28BA2BA,MAAMA,EAAQC,EAmGRC,EAAkBC,EAAS,IAC/BH,EAAM,KAAO,QAAUI,EAAQJ,EAAM,EACvC,EAUMK,EAAQC,EAAS,EACjBC,EAAgBJ,EAAiC,IACrD,CAAC,QAAS,GAAG,EAAE,SAASH,EAAM,EAAE,EAAI,OAAYA,EAAM,IACxD,EAEMQ,EAAmBL,EAAS,IAChCH,EAAM,YAAY,IAAKS,GAAe,cAAcA,CAAU,EAAE,EAAE,KAAK,GAAG,CAC5E,EAEMC,EAAWP,EAAS,IACjBH,EAAM,SAAWK,EAAM,cAAc,GAAKA,EAAM,eAAe,CACvE,EACKM,EAAeR,EAAS,IAE1BO,EAAS,OACT,CAAC,iBAAkB,cAAe,kBAAkB,EAAE,SACpDV,EAAM,OAAA,EAGD,GAAGA,EAAM,OAAO,WAElBA,EAAM,OACd,EAEKY,EAAmBT,EAAS,IACzBH,EAAM,UAAY,cAC1B,EACKa,EAAoBV,EAAS,IAC1BH,EAAM,QAAQ,WAAW,SAAS,CAC1C,EACKc,EAAgBX,EAAS,IAE3BH,EAAM,QAAQ,WAAW,WAAW,GACpCA,EAAM,QAAQ,WAAW,cAAc,GACvCA,EAAM,UAAY,OAErB,EAEKe,EAA4BZ,EAAS,IAAMH,EAAM,KAAO,OAAO,EAE/DgB,EAAeb,EACnB,IAGGH,EAAM,UAAYA,EAAM,uBAA0B,MACvD,EAEMiB,EAAoBd,EAA2B,IAC7BH,EAAM,UAAY,CAACA,EAAM,uBAEtBe,EAA0B,OAAU,MAC9D,EAEKG,EAAYf,EAAS,IACzBH,EAAM,KAAO,QAAU,CAAE,KAAMK,EAAM,MAAS,CAAA,CAChD,EAEA,OAAAc,EACE,IAAMnB,EAAM,GACXoB,GAAO,CAEJ,CAAC,IAAK,UAAU,EAAE,SAASA,CAAE,GAC7Bf,EAAM,OAAS,IAAIgB,CAAqB,IAExCC,EACE,yDAAyDF,CAAE,2BAC7D,CAEJ,EACA,CAAE,UAAW,EAAK,CACpB;;;;;;;;;"}